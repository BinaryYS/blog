{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":0},{"_id":"source/img/wypay.jpg","path":"img/wypay.jpg","modified":0,"renderable":0},{"_id":"source/img/avg.jpg","path":"img/avg.jpg","modified":0,"renderable":0},{"_id":"source/img/hexo/hexo-init.jpg","path":"img/hexo/hexo-init.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/img/hexo/hexo-file.jpg","path":"img/hexo/hexo-file.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/img/MySQL/MySql-engines.jpg","path":"img/MySQL/MySql-engines.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/img/avatar.gif","path":"img/avatar.gif","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1497598049090},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1497598049090},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1497598049091},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1497598049091},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1497598049091},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1497598049091},{"_id":"themes/next/README.en.md","hash":"f947d9a552da869f0dbef140ceeeb7b040b0f4a4","modified":1497598049091},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1497598049092},{"_id":"themes/next/_config.yml","hash":"82eb4390f9b0076b3b96b05e71bb2fcd71836b82","modified":1497598049092},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1497598049092},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1497598049114},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1497598049093},{"_id":"source/categories/index.md","hash":"d21a2c92b24d1ec102ae9a9d3e66391e4dc5b968","modified":1497598049045},{"_id":"source/img/alipay.jpg","hash":"4615f6fd000b0ce80b90b3680349a4088358d059","modified":1497598049048},{"_id":"source/img/wypay.jpg","hash":"8bf79f5a03cdd6d1d7f20ead7e599d6390c90fe0","modified":1497598049059},{"_id":"source/tags/index.md","hash":"e790917fac786961a8c2a9b375da594385a99794","modified":1497598049059},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1497598049090},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1497598049090},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1497598049093},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1497598049093},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1497598049093},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1497598049094},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1497598049094},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1497598049094},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1497598049094},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1497598049095},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1497598049095},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1497598049095},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1497598049096},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1497598049096},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1497598049096},{"_id":"themes/next/layout/_layout.swig","hash":"b4ef30f7da073bf2a9052186f76e0e080de1c794","modified":1497598049098},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1497598049112},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1497598049112},{"_id":"themes/next/layout/index.swig","hash":"4e0ebf102f4a20c260fd59943b13a08675006259","modified":1497598049112},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1497598049113},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1497598049113},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1497598049113},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1497598049113},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1497598049114},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1497598049185},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1497598049185},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1497598049185},{"_id":"source/img/avg.jpg","hash":"82aa1a3b5f5543aa49fc000e3fb0c8580cf3580c","modified":1497598049057},{"_id":"source/_posts/教程/hexo-github搭建博客.md","hash":"5331f616f8ca43f6e1327bb86ea1a1a5d9485da1","modified":1497598049041},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497598049140},{"_id":"source/img/hexo/hexo-init.jpg","hash":"153d8e0c34aee0408f9c63eea5e644f8018ac4c1","modified":1497598049059},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1497598049097},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1497598049097},{"_id":"themes/next/layout/_macro/post.swig","hash":"cadfff449289f9369a80c8a981a9ad1dbbd59083","modified":1497598049098},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1497598049098},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a42851e17d8961e5cae8b588d95a4a5456964972","modified":1497598049099},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1497598049099},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1497598049099},{"_id":"themes/next/layout/_partials/comments.swig","hash":"09da002fbeb0fe2ac3f180ecf77bce568ea989ca","modified":1497598049100},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1497598049100},{"_id":"themes/next/layout/_partials/footer.swig","hash":"50742bed051025ae3a35aa0ddd402a36263486de","modified":1497598049100},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1497598049100},{"_id":"themes/next/layout/_partials/header.swig","hash":"8985089c950d6df0efab9cd549a6b9ee50708ee2","modified":1497598049101},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1497598049101},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1497598049102},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1497598049102},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1497598049104},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1497598049104},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1497598049104},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1497598049111},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1497598049115},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1497598049115},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1497598049115},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1497598049115},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1497598049116},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1497598049140},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1497598049141},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1497598049148},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1497598049149},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1497598049149},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1497598049149},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1497598049150},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1497598049150},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1497598049151},{"_id":"themes/next/source/images/favicon.ico","hash":"8ed9872ad7b745c469beff85933c29474214d33b","modified":1497598049151},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497598049151},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497598049151},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1497598049152},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1497598049152},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1497598049152},{"_id":"source/img/hexo/hexo-file.jpg","hash":"52295fae26256ba75c627e60c27173dd74d921c8","modified":1497598049058},{"_id":"source/_posts/笔记/MySQL/MySQL分片扩展.md","hash":"f8773e524ee15a21db0f56b554e7392ad13ce392","modified":1497598049042},{"_id":"source/_posts/笔记/MySQL/MySQL存储引擎.md","hash":"afda29489f38061ff3c44e0d48bc8d7da7754e20","modified":1497598049042},{"_id":"source/_posts/笔记/MySQL/MySQL数据库锁.md","hash":"554fdfde40f91fa3d601c672bdca739f276747f2","modified":1497598049043},{"_id":"source/_posts/笔记/SQL/清库存储过程.md","hash":"56a61a2d69b57d6fb723d225819f99baeb8a7ed4","modified":1497602020146},{"_id":"source/_posts/笔记/java多线程/java多线程.md","hash":"82e20bc35bddaf8697d323f1aaf4edd2230d2289","modified":1497598049043},{"_id":"source/_posts/笔记/redis实战/redis实战.md","hash":"18e346406d7ced91aba5fa49c36e8fb5f415ff5b","modified":1497598049044},{"_id":"source/_posts/笔记/数据库/数据库查询.md","hash":"6c7b90a192c54cf9d163e65a7a5b7708edfc4a1d","modified":1497598049044},{"_id":"source/_posts/笔记/深入理解JVM/深入理解JVM.md","hash":"d820587aff8e5e88ee7db58f5af6cc9f72b71535","modified":1497600604542},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497598049106},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497598049106},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497598049132},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497598049133},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497598049133},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497598049139},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497598049140},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1497598049097},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1497598049097},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1497598049101},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1497598049101},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1497598049102},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1497598049102},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1497598049103},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1497598049103},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1497598049103},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1497598049103},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1497598049103},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1497598049105},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1497598049106},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1497598049107},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4f9efb15c9aaa016ac78d9f8aa2caefea87869df","modified":1497598049108},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1497598049110},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1497598049110},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1497598049110},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1497598049111},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1497598049111},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1497598049133},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1497598049133},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1497598049132},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1497598049139},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c666e352c3b8e4ad0a16cc757b08f44ef9172182","modified":1497598049139},{"_id":"themes/next/source/css/_variables/base.styl","hash":"8b08a5ce4222aa731b180a12127bd0e52d12ede8","modified":1497598049140},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1497598049156},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1497598049159},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1497598049168},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1497598049168},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1497598049168},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1497598049168},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1497598049168},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1497598049166},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1497598049166},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1497598049166},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1497598049167},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1497598049176},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1497598049177},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1497598049178},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1497598049178},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1497598049178},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1497598049178},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1497598049179},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1497598049181},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1497598049181},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1497598049184},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1497598049184},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1497598049185},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1497598049153},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1497598049153},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1497598049153},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1497598049153},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1497598049154},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1497598049154},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1497598049155},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1497598049156},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1497598049177},{"_id":"source/img/MySQL/MySql-engines.jpg","hash":"1aa942d4fb19629c75dae9f4d9f4464d4e81a909","modified":1497598049047},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1497598049107},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1497598049107},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1497598049107},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1497598049108},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1497598049108},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1497598049108},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1497598049108},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1497598049109},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1497598049109},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1497598049109},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1497598049109},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"f40a697fd046415924a142eec1effad70f3cb187","modified":1497598049110},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1497598049117},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1497598049117},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1497598049117},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1497598049118},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1497598049122},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1497598049127},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1497598049130},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1497598049131},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1497598049131},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1497598049131},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1497598049132},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1497598049132},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1497598049134},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1497598049134},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1497598049134},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1497598049135},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1497598049135},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1497598049135},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1497598049135},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1497598049136},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1497598049136},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1497598049137},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1497598049137},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1497598049137},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"34acb45007229b299951ce35d8eef642ea16fbe9","modified":1497598049138},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"221d3dbc04ff6c211ba9382397c4977e9f493153","modified":1497598049138},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"173f3aa31c41782591b7abeadd4f88f68d59b042","modified":1497598049138},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1497598049138},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"1be4ef3f97f329e2531bfd2dfdc40c0e46df35c8","modified":1497598049138},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1497598049139},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497598049160},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497598049161},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497598049161},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497598049162},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497598049162},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497598049162},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1497598049164},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1497598049165},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1497598049165},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1497598049169},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1497598049169},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1497598049170},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1497598049167},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1497598049167},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1497598049179},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1497598049180},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c2390263a298a2b78c5f941e6827c13f02e1ee85","modified":1497598049155},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1497598049171},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1497598049171},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1497598049175},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1497598049176},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1497598049183},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1497598049118},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1497598049118},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1497598049119},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1497598049119},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1497598049119},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1497598049119},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1497598049120},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1497598049120},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1497598049120},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1497598049121},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1497598049121},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1497598049121},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1497598049121},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1497598049121},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"0d9a4ae2e4ab418453e0f81b8fb1ad4b856f91d4","modified":1497598049122},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1497598049122},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1497598049123},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1497598049123},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1497598049123},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e28c805011f65b54060f03be90ec5a23714c4985","modified":1497598049123},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1497598049124},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1497598049124},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1497598049124},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1497598049124},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1497598049124},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"011d5828b4972b2df0b429794b4466ba5bc1b49e","modified":1497598049125},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1497598049125},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1497598049125},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1497598049125},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1497598049126},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1497598049126},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1497598049126},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1497598049126},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1497598049126},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1497598049127},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1497598049127},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1497598049127},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1497598049128},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1497598049128},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1497598049128},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1497598049128},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1497598049128},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1497598049129},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1497598049129},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1497598049129},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1497598049129},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1497598049130},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1497598049130},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1497598049136},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1497598049136},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1497598049137},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497598049163},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1497598049163},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1497598049163},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1497598049164},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1497598049164},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1497598049164},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1497598049174},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1497598049159},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1497598049173},{"_id":"source/img/avatar.gif","hash":"e3f2d11f37640546f9ed8dcef8d51a9a6ded33a7","modified":1497598049055},{"_id":"themes/next/source/images/avatar.gif","hash":"e3f2d11f37640546f9ed8dcef8d51a9a6ded33a7","modified":1497598049148},{"_id":"public/search.xml","hash":"96b2634566be33d1bcd8d12daba78d4fd6017480","modified":1497602035006},{"_id":"public/categories/index.html","hash":"fbae894e4033a5b545e769b7d7542d7808b3d472","modified":1497602035042},{"_id":"public/tags/index.html","hash":"b9e33811a15eb82683dfd275575a61834412b509","modified":1497602035043},{"_id":"public/2017/06/16/笔记/深入理解JVM/深入理解JVM/index.html","hash":"abcd371f9d1761c9f27d2b4e04f7a2c610d1db3f","modified":1497602035043},{"_id":"public/2017/06/16/教程/hexo-github搭建博客/index.html","hash":"d10d084f53d40a422997c678f9e2281df5a5b773","modified":1497602035043},{"_id":"public/2017/02/23/笔记/数据库/数据库查询/index.html","hash":"c0da2ebb22bc1aba7c0aba585e42a8bae17c4cd9","modified":1497602035044},{"_id":"public/2017/02/14/笔记/MySQL/MySQL分片扩展/index.html","hash":"6b5cd14b92df65bcf6e1288ccd52a821794199d9","modified":1497602035044},{"_id":"public/2017/02/14/笔记/SQL/清库存储过程/index.html","hash":"67cca8c1e3d4440ca3132500f39a98c72363e538","modified":1497602035045},{"_id":"public/2017/02/13/笔记/redis实战/redis实战/index.html","hash":"19e9abb41b9f9bc4e081fae819c3438aeaf24a88","modified":1497602035045},{"_id":"public/2017/02/08/笔记/MySQL/MySQL数据库锁/index.html","hash":"06d0aa03ed9a7d404ac352e556f2e60fbb095101","modified":1497602035045},{"_id":"public/2017/02/08/笔记/MySQL/MySQL存储引擎/index.html","hash":"e6839574306111c4928b2a2d079eb770df9963b7","modified":1497602035045},{"_id":"public/2017/02/06/笔记/java多线程/java多线程/index.html","hash":"b1f240a6aafdf59041f2226e686ce28c76e5e295","modified":1497602035046},{"_id":"public/archives/index.html","hash":"2ab396208516c349064800928178d739a58a39f6","modified":1497602035046},{"_id":"public/archives/2017/index.html","hash":"d31579dd522fce825c5bd21596a603f4ca94caba","modified":1497602035046},{"_id":"public/archives/2017/02/index.html","hash":"1800078d615ddacab19aec427889f58e7b0331c1","modified":1497602035046},{"_id":"public/archives/2017/06/index.html","hash":"98f1186d6e1afa97391c42a4681e0f0949c7a833","modified":1497602035046},{"_id":"public/categories/教程/index.html","hash":"968d584be0a6a22cecb01533aefa7d1d475a4e0e","modified":1497602035047},{"_id":"public/categories/笔记/index.html","hash":"32e6896f57dc79cee713372367496c98222f1724","modified":1497602035047},{"_id":"public/index.html","hash":"7e334b83ec231842b34a5c4fe55c12904566c463","modified":1497602035047},{"_id":"public/tags/npm/index.html","hash":"44fbf23c0893c4186f1ca49f05d5520f9cce838e","modified":1497602035047},{"_id":"public/tags/hexo/index.html","hash":"05390b4ba8cbd04bc9fd53a52292aa4e16555063","modified":1497602035047},{"_id":"public/tags/github/index.html","hash":"d81643b1ca5e662c41931788250e98827aa33013","modified":1497602035047},{"_id":"public/tags/MySQL/index.html","hash":"71a1c16495f1f588608074e7403ce00775656178","modified":1497602035047},{"_id":"public/tags/存储引擎/index.html","hash":"5b8ddb7949b9bd90344c58813a518adb909fb28e","modified":1497602035047},{"_id":"public/tags/分片/index.html","hash":"e612e972be7d3c50d6004e48b0a282ed40f9e0c5","modified":1497602035047},{"_id":"public/tags/SQL/index.html","hash":"c2b6ef47ccb51a0ee1b56124c08937362b008670","modified":1497602035047},{"_id":"public/tags/存储过程，MyBatis/index.html","hash":"12c73484b6ac188348498ae2a7ab9acab80f9c5d","modified":1497602035047},{"_id":"public/tags/锁/index.html","hash":"6dfd2223eec747facdd477c06cc752533b7fa595","modified":1497602035048},{"_id":"public/tags/redis/index.html","hash":"4aa895e71600d9cba865f51c5aec03282e443d91","modified":1497602035048},{"_id":"public/tags/java/index.html","hash":"1995c34e32c3e2e9f71bf541872530c644188e29","modified":1497602035048},{"_id":"public/tags/thread/index.html","hash":"2b07a9b38c74563bc588f1c2b0d28efee8a1f5a2","modified":1497602035048},{"_id":"public/tags/jvm/index.html","hash":"568f8e532402d43b797f469f2259b16aadc29bcf","modified":1497602035048},{"_id":"public/tags/数据库/index.html","hash":"accda4b4fa9dc510f9bcd0db204157ef95b23e1c","modified":1497602035048},{"_id":"public/tags/查询/index.html","hash":"1fdae8f015cb5bcef6ae769c69a30a598c2898da","modified":1497602035048},{"_id":"public/img/alipay.jpg","hash":"4615f6fd000b0ce80b90b3680349a4088358d059","modified":1497602035089},{"_id":"public/img/wypay.jpg","hash":"8bf79f5a03cdd6d1d7f20ead7e599d6390c90fe0","modified":1497602035089},{"_id":"public/img/hexo/hexo-init.jpg","hash":"153d8e0c34aee0408f9c63eea5e644f8018ac4c1","modified":1497602035089},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1497602035089},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1497602035089},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1497602035090},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1497602035090},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1497602035090},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1497602035090},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1497602035090},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1497602035090},{"_id":"public/images/favicon.ico","hash":"8ed9872ad7b745c469beff85933c29474214d33b","modified":1497602035090},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497602035090},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497602035090},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1497602035090},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1497602035091},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1497602035091},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1497602035091},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1497602035091},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497602035091},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497602035091},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497602035091},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497602035091},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497602035091},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497602035091},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1497602035091},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497602035091},{"_id":"public/img/avg.jpg","hash":"82aa1a3b5f5543aa49fc000e3fb0c8580cf3580c","modified":1497602036142},{"_id":"public/img/hexo/hexo-file.jpg","hash":"52295fae26256ba75c627e60c27173dd74d921c8","modified":1497602036143},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1497602036153},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1497602036153},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1497602036153},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1497602036153},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1497602036160},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1497602036160},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1497602036160},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1497602036160},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1497602036160},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1497602036161},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1497602036161},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1497602036161},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1497602036161},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1497602036161},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1497602036161},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1497602036161},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1497602036161},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1497602036162},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1497602036162},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1497602036162},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1497602036162},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1497602036162},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1497602036162},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1497602036162},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1497602036162},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1497602036162},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1497602036162},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1497602036162},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1497602036162},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1497602036162},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1497602036163},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1497602036163},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1497602036163},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1497602036163},{"_id":"public/css/main.css","hash":"7e94bd7da3f62d86a8accc1fcbc7f0c5c270816a","modified":1497602036163},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1497602036163},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1497602036163},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1497602036163},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1497602036163},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1497602036163},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1497602036163},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1497602036163},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1497602036163},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1497602036163},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1497602036163},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1497602036163},{"_id":"public/img/MySQL/MySql-engines.jpg","hash":"1aa942d4fb19629c75dae9f4d9f4464d4e81a909","modified":1497602036181},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1497602036214},{"_id":"public/img/avatar.gif","hash":"e3f2d11f37640546f9ed8dcef8d51a9a6ded33a7","modified":1497602036361},{"_id":"public/images/avatar.gif","hash":"e3f2d11f37640546f9ed8dcef8d51a9a6ded33a7","modified":1497602036361}],"Category":[{"name":"教程","_id":"cj3zlkzvr0003kct77yu3kwq0"},{"name":"笔记","_id":"cj3zlkzy8000dkct7f5fb6d25"}],"Data":[],"Page":[{"title":"类型","date":"2017-02-06T03:40:28.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 类型\ndate: 2017-02-06 11:40:28\ntype: categories\n---\n","updated":"2017-06-16T07:27:29.045Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj3zlkzo40000kct71shvfc9x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-02-06T03:39:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-02-06 11:39:25\ntype: \"tags\"\n---\n","updated":"2017-06-16T07:27:29.059Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj3zlkzu60001kct7ljsr67t1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo-github搭建博客","date":"2017-06-16T07:27:29.041Z","_content":"\n## 1.安装git\n1.1 安装好git之后一定要配置好环境变量 *（PATH中添加X:\\Git\\bin;X:\\Git\\libexec\\git-core）*否则提交代码到远程会报 git error\n<!-- more -->\n## 2.安装node.js\n2.1 配置环境变量 *(貌似安装node.js时自动配置了，如果没有自行添加)*\n2.2 在dos窗口执行node -v检查配置是否完成\n\n## 3.配置github\n3.1 如果没有github账号，则参考教程申请账号、配置连接 **[有道云教程](http://note.youdao.com/noteshare?id=f9e40005274860eb585a07bb01f34416&sub=5BE205668CEE44BAB5B46113500A7D19)**\n3.2 创建远程仓库blog用于管理博客源码,本地拉取blog的源码\n3.3 创建远程仓库用于存放编译blog生成的public文件，也就是能够访问到的静态文件，命名格式为 ***github账号.github.io***\n\n## 4.创建本地博客(执行命令用git bash)\n4.1 安装hexo,执行命令\n``` bash\nnpm install -g hexo-cli\n```\n4.2 新建一个localblog文件，执行命令生成hexo文件\n``` bash\n$ hexo init\n```\n<img src=\"/img/hexo/hexo-init.jpg\" width=\"650\" height=\"800\">\n\n4.3 将localblog中生成的文件全部拷贝到远程拉取的blog项目中\n<img src=\"/img/hexo/hexo-file.jpg\" width=\"650\" height=\"800\">\n\n4.4 在blog目录下执行命令拉取依赖的包\n``` bash\n$ npm install\n```\n4.5 执行命令安装hexo-deployer-git\n``` bash\n$ npm install hexo-deployer-git --save\n```\n4.6 清除缓存\n``` bash\n$ hexo clean\n```\n4.7 编译\n``` bash\n$ hexo g\n```\n4.9 本地指定端口启动，localhost:5000访问\n``` bash\n$ hexo s -p 5000\n```\n## 5.部署到远程仓库***github账号.github.io***\n5.1 修改配置文件_config.yml\n``` bash\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:github账号/github账号.github.io.git\n```\n5.2 执行命令清除缓存 hexo clean\n``` bash\n$ hexo clean\n```\n5.3 编译\n``` bash\n$ hexo g\n```\n5.4 推送至远程仓库github账号.github.io\n``` bash\n$  hexo d\n```\n5.5 访问blog,https://github账号.github.io\n","source":"_posts/教程/hexo-github搭建博客.md","raw":"---\ntitle: hexo-github搭建博客\ndate: 201７-02-04 19:10:05\ntags: [npm, hexo, github]\ncategories: 教程\n---\n\n## 1.安装git\n1.1 安装好git之后一定要配置好环境变量 *（PATH中添加X:\\Git\\bin;X:\\Git\\libexec\\git-core）*否则提交代码到远程会报 git error\n<!-- more -->\n## 2.安装node.js\n2.1 配置环境变量 *(貌似安装node.js时自动配置了，如果没有自行添加)*\n2.2 在dos窗口执行node -v检查配置是否完成\n\n## 3.配置github\n3.1 如果没有github账号，则参考教程申请账号、配置连接 **[有道云教程](http://note.youdao.com/noteshare?id=f9e40005274860eb585a07bb01f34416&sub=5BE205668CEE44BAB5B46113500A7D19)**\n3.2 创建远程仓库blog用于管理博客源码,本地拉取blog的源码\n3.3 创建远程仓库用于存放编译blog生成的public文件，也就是能够访问到的静态文件，命名格式为 ***github账号.github.io***\n\n## 4.创建本地博客(执行命令用git bash)\n4.1 安装hexo,执行命令\n``` bash\nnpm install -g hexo-cli\n```\n4.2 新建一个localblog文件，执行命令生成hexo文件\n``` bash\n$ hexo init\n```\n<img src=\"/img/hexo/hexo-init.jpg\" width=\"650\" height=\"800\">\n\n4.3 将localblog中生成的文件全部拷贝到远程拉取的blog项目中\n<img src=\"/img/hexo/hexo-file.jpg\" width=\"650\" height=\"800\">\n\n4.4 在blog目录下执行命令拉取依赖的包\n``` bash\n$ npm install\n```\n4.5 执行命令安装hexo-deployer-git\n``` bash\n$ npm install hexo-deployer-git --save\n```\n4.6 清除缓存\n``` bash\n$ hexo clean\n```\n4.7 编译\n``` bash\n$ hexo g\n```\n4.9 本地指定端口启动，localhost:5000访问\n``` bash\n$ hexo s -p 5000\n```\n## 5.部署到远程仓库***github账号.github.io***\n5.1 修改配置文件_config.yml\n``` bash\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:github账号/github账号.github.io.git\n```\n5.2 执行命令清除缓存 hexo clean\n``` bash\n$ hexo clean\n```\n5.3 编译\n``` bash\n$ hexo g\n```\n5.4 推送至远程仓库github账号.github.io\n``` bash\n$  hexo d\n```\n5.5 访问blog,https://github账号.github.io\n","slug":"教程/hexo-github搭建博客","published":1,"updated":"2017-06-16T07:27:29.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3zlkzvk0002kct7wfrdunk5","content":"<h2 id=\"1-安装git\"><a href=\"#1-安装git\" class=\"headerlink\" title=\"1.安装git\"></a>1.安装git</h2><p>1.1 安装好git之后一定要配置好环境变量 <em>（PATH中添加X:\\Git\\bin;X:\\Git\\libexec\\git-core）</em>否则提交代码到远程会报 git error<br><a id=\"more\"></a></p>\n<h2 id=\"2-安装node-js\"><a href=\"#2-安装node-js\" class=\"headerlink\" title=\"2.安装node.js\"></a>2.安装node.js</h2><p>2.1 配置环境变量 <em>(貌似安装node.js时自动配置了，如果没有自行添加)</em><br>2.2 在dos窗口执行node -v检查配置是否完成</p>\n<h2 id=\"3-配置github\"><a href=\"#3-配置github\" class=\"headerlink\" title=\"3.配置github\"></a>3.配置github</h2><p>3.1 如果没有github账号，则参考教程申请账号、配置连接 <strong><a href=\"http://note.youdao.com/noteshare?id=f9e40005274860eb585a07bb01f34416&amp;sub=5BE205668CEE44BAB5B46113500A7D19\" target=\"_blank\" rel=\"external\">有道云教程</a></strong><br>3.2 创建远程仓库blog用于管理博客源码,本地拉取blog的源码<br>3.3 创建远程仓库用于存放编译blog生成的public文件，也就是能够访问到的静态文件，命名格式为 <strong><em>github账号.github.io</em></strong></p>\n<h2 id=\"4-创建本地博客-执行命令用git-bash\"><a href=\"#4-创建本地博客-执行命令用git-bash\" class=\"headerlink\" title=\"4.创建本地博客(执行命令用git bash)\"></a>4.创建本地博客(执行命令用git bash)</h2><p>4.1 安装hexo,执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>4.2 新建一个localblog文件，执行命令生成hexo文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/hexo/hexo-init.jpg\" width=\"650\" height=\"800\"></p>\n<p>4.3 将localblog中生成的文件全部拷贝到远程拉取的blog项目中<br><img src=\"/img/hexo/hexo-file.jpg\" width=\"650\" height=\"800\"></p>\n<p>4.4 在blog目录下执行命令拉取依赖的包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>4.5 执行命令安装hexo-deployer-git<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>4.6 清除缓存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure></p>\n<p>4.7 编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure></p>\n<p>4.9 本地指定端口启动，localhost:5000访问<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s -p 5000</div></pre></td></tr></table></figure></p>\n<h2 id=\"5-部署到远程仓库github账号-github-io\"><a href=\"#5-部署到远程仓库github账号-github-io\" class=\"headerlink\" title=\"5.部署到远程仓库github账号.github.io\"></a>5.部署到远程仓库<strong><em>github账号.github.io</em></strong></h2><p>5.1 修改配置文件_config.yml<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repo:</div><div class=\"line\">    github: git@github.com:github账号/github账号.github.io.git</div></pre></td></tr></table></figure></p>\n<p>5.2 执行命令清除缓存 hexo clean<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure></p>\n<p>5.3 编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure></p>\n<p>5.4 推送至远程仓库github账号.github.io<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  hexo d</div></pre></td></tr></table></figure></p>\n<p>5.5 访问blog,<a href=\"https://github账号.github.io\" target=\"_blank\" rel=\"external\">https://github账号.github.io</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-安装git\"><a href=\"#1-安装git\" class=\"headerlink\" title=\"1.安装git\"></a>1.安装git</h2><p>1.1 安装好git之后一定要配置好环境变量 <em>（PATH中添加X:\\Git\\bin;X:\\Git\\libexec\\git-core）</em>否则提交代码到远程会报 git error<br>","more":"</p>\n<h2 id=\"2-安装node-js\"><a href=\"#2-安装node-js\" class=\"headerlink\" title=\"2.安装node.js\"></a>2.安装node.js</h2><p>2.1 配置环境变量 <em>(貌似安装node.js时自动配置了，如果没有自行添加)</em><br>2.2 在dos窗口执行node -v检查配置是否完成</p>\n<h2 id=\"3-配置github\"><a href=\"#3-配置github\" class=\"headerlink\" title=\"3.配置github\"></a>3.配置github</h2><p>3.1 如果没有github账号，则参考教程申请账号、配置连接 <strong><a href=\"http://note.youdao.com/noteshare?id=f9e40005274860eb585a07bb01f34416&amp;sub=5BE205668CEE44BAB5B46113500A7D19\" target=\"_blank\" rel=\"external\">有道云教程</a></strong><br>3.2 创建远程仓库blog用于管理博客源码,本地拉取blog的源码<br>3.3 创建远程仓库用于存放编译blog生成的public文件，也就是能够访问到的静态文件，命名格式为 <strong><em>github账号.github.io</em></strong></p>\n<h2 id=\"4-创建本地博客-执行命令用git-bash\"><a href=\"#4-创建本地博客-执行命令用git-bash\" class=\"headerlink\" title=\"4.创建本地博客(执行命令用git bash)\"></a>4.创建本地博客(执行命令用git bash)</h2><p>4.1 安装hexo,执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>4.2 新建一个localblog文件，执行命令生成hexo文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/hexo/hexo-init.jpg\" width=\"650\" height=\"800\"></p>\n<p>4.3 将localblog中生成的文件全部拷贝到远程拉取的blog项目中<br><img src=\"/img/hexo/hexo-file.jpg\" width=\"650\" height=\"800\"></p>\n<p>4.4 在blog目录下执行命令拉取依赖的包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>4.5 执行命令安装hexo-deployer-git<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>4.6 清除缓存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure></p>\n<p>4.7 编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure></p>\n<p>4.9 本地指定端口启动，localhost:5000访问<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s -p 5000</div></pre></td></tr></table></figure></p>\n<h2 id=\"5-部署到远程仓库github账号-github-io\"><a href=\"#5-部署到远程仓库github账号-github-io\" class=\"headerlink\" title=\"5.部署到远程仓库github账号.github.io\"></a>5.部署到远程仓库<strong><em>github账号.github.io</em></strong></h2><p>5.1 修改配置文件_config.yml<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repo:</div><div class=\"line\">    github: git@github.com:github账号/github账号.github.io.git</div></pre></td></tr></table></figure></p>\n<p>5.2 执行命令清除缓存 hexo clean<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure></p>\n<p>5.3 编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure></p>\n<p>5.4 推送至远程仓库github账号.github.io<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  hexo d</div></pre></td></tr></table></figure></p>\n<p>5.5 访问blog,<a href=\"https://github账号.github.io\" target=\"_blank\" rel=\"external\">https://github账号.github.io</a></p>"},{"title":"MySQL存储引擎","date":"2017-02-08T01:46:05.000Z","_content":"\n## 存储引擎\n   关系数据库表是用于存储和组织信息的数据结构，可以将表理解为由行和列组成的表格，类似于Excel的电子表格的形式。有的表简单，有的表复杂，<!-- more -->有的表根本不用来存储任何长期的数据，有的表读取时非常快，但是插入数据时去很差；而我们在实际开发过程中，就可能需要各种各样的表，不同的表，就意味着存储不同类型的数据，数据的处理上也会存在着差异，那么对于MySQL来说，它提供了很多种类型的存储引擎，我们可以根据对数据处理的需求，选择不同的存储引擎，从而最大限度的利用MySQL强大的功能。下面就对MySQL支持的存储引擎进行简单的介绍。\n<img src=\"/img/MySQL/MySql-engines.jpg\" width=\"650\" height=\"800\">\n### MyISAM\n   MyISAM表是独立于操作系统的，这说明可以轻松地将其从Windows服务器移植到Linux服务器；每当我们建立一个MyISAM引擎的表时，就会在本地磁盘上建立三个文件，文件名就是表名。例如，我建立了一个MyISAM引擎的tb_Demo表，那么就会生成以下三个文件：\n   1.tb_demo.frm，存储表定义；\n   2.tb_demo.MYD，存储数据；\n   3.tb_demo.MYI，存储索引。\n   MyISAM表无法处理事务，这就意味着有事务处理需求的表，不能使用MyISAM存储引擎。MyISAM存储引擎特别适合在以下几种情况下使用：\n   1.选择密集型的表。MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。\n   2.插入密集型的表。MyISAM的并发插入特性允许同时选择和插入数据。例如：MyISAM存储引擎很适合管理邮件或Web服务器日志数据。\n\n### InnoDB\n   InnoDB是一个健壮的事务型存储引擎(支持事务安全)，这种存储引擎已经被很多互联网公司使用，为用户操作非常大的数据存储提供了一个强大的解决方案。MySQL 5.6.13版，InnoDB就是作为默认的存储引擎。InnoDB还引入了行级锁定和外键约束，在以下场合下，使用InnoDB是最理想的选择：\n   1.更新密集的表,InnoDB存储引擎特别适合处理多重并发的更新请求。\n   2.事务，InnoDB存储引擎是支持事务的标准MySQL存储引擎。\n   3.自动灾难恢复与其它存储引擎不同，InnoDB表能够自动从灾难中恢复。\n   4.外键约束，MySQL支持外键的存储引擎只有InnoDB。\n   5.支持自动增加列AUTO_INCREMENT属性。\n   一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB是不错的选择。\n\n### MEMORY\n   使用MySQL Memory存储引擎的出发点是速度。为得到最快的响应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提供很高的性能，但当mysqld守护进程崩溃时，所有的Memory数据都会丢失。获得速度的同时也带来了一些缺陷。它要求存储在Memory数据表里的数据使用的是长度不变的格式，这意味着不能使用BLOB和TEXT这样的长度可变的数据类型，VARCHAR是一种长度可变的类型，但因为它在MySQL内部当做长度固定不变的CHAR类型，所以可以使用。\n   一般在以下几种情况下使用Memory存储引擎：\n   1.目标数据较小，而且被非常频繁地访问。在内存中存放数据，所以会造成内存的使用，可以通过参数max_heap_table_size控制Memory表的大小，设置此参数，就可以限制Memory表的最大大小。\n   2.如果数据是临时的，而且要求必须立即可用，那么就可以存放在内存表中。\n   3.存储在Memory表中的数据如果突然丢失，不会对应用服务产生实质的负面影响。\n   Memory同时支持散列索引和B树索引。B树索引的优于散列索引的是，可以使用部分查询和通配查询，也可以使用<、>和>=等操作符方便数据挖掘。散列索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了，因此散列索引值适合使用在=和<>的操作符中，不适合在<或>操作符中，也同样不适合用在order by子句中。\n   使用MEMORY引擎示例：\n``` sql\n create table users\n (\n     id smallint unsigned not null auto_increment,\n     username varchar(15) not null,\n     pwd varchar(15) not null,\n     index using hash (username),** index using btree (username)**\n     primary key (id)\n )engine=memory;\n```\n在username字段上使用了HASH散列索引\n\n### MERGE\n  MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表结构必须完全相同，尽管其使用不如其它引擎突出，但是在某些情况下非常有用。说白了，Merge表就是几个相同MyISAM表的聚合器；Merge表中并没有数据，对Merge类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行操作。Merge存储引擎的使用场景。\n  对于服务器日志这种信息，一般常用的存储策略是将数据分成很多表，每个名称与特定的时间端相关。例如：可以用12个相同的表来存储服务器日志数据，每个表用对应各个月份的名字来命名。当有必要基于所有12个日志表的数据来生成报表，这意味着需要编写并更新多表查询，以反映这些表中的信息。与其编写这些可能出现错误的查询，不如将这些表合并起来使用一条查询，之后再删除Merge表，而不影响原来的数据，删除Merge表只是删除Merge表的定义，对内部的表没有任何影响。\n\n### ARCHIVE\n  Archive是归档的意思，在归档之后很多的高级功能就不再支持了，仅仅支持最基本的插入和查询两种功能。在MySQL 5.5版以前，Archive是不支持索引，但是在MySQL 5.5以后的版本中就开始支持索引了。Archive拥有很好的压缩机制，它使用zlib压缩库，在记录被请求时会实时压缩，所以它经常被用来当做仓库使用。\n \n### NDB\nMySQL 收购的一个集群存储引擎，类似于ORACLE的RAC引擎，但是NDB是share nothing集群架构。NDB的数据都是存储在内存中，所以主键的查找速率很快，并且可以通过增加存储结点，线性增加数据库的性能。\n \n##查看MySql服务器支持的存储引擎\n``` bash\nshow engines\n```\n\n## 存储引擎的选择标准\n（1）选择标准可以分为：\n（2）是否需要支持事务；\n（3）是否需要使用热备；\n（4）崩溃恢复：能否接受崩溃；\n（5）是否需要外键支持；\n","source":"_posts/笔记/MySQL/MySQL存储引擎.md","raw":"---\ntitle: MySQL存储引擎\ndate: 2017-02-08 09:46:05\ntags: [MySQL,存储引擎]\ncategories: 笔记\n---\n\n## 存储引擎\n   关系数据库表是用于存储和组织信息的数据结构，可以将表理解为由行和列组成的表格，类似于Excel的电子表格的形式。有的表简单，有的表复杂，<!-- more -->有的表根本不用来存储任何长期的数据，有的表读取时非常快，但是插入数据时去很差；而我们在实际开发过程中，就可能需要各种各样的表，不同的表，就意味着存储不同类型的数据，数据的处理上也会存在着差异，那么对于MySQL来说，它提供了很多种类型的存储引擎，我们可以根据对数据处理的需求，选择不同的存储引擎，从而最大限度的利用MySQL强大的功能。下面就对MySQL支持的存储引擎进行简单的介绍。\n<img src=\"/img/MySQL/MySql-engines.jpg\" width=\"650\" height=\"800\">\n### MyISAM\n   MyISAM表是独立于操作系统的，这说明可以轻松地将其从Windows服务器移植到Linux服务器；每当我们建立一个MyISAM引擎的表时，就会在本地磁盘上建立三个文件，文件名就是表名。例如，我建立了一个MyISAM引擎的tb_Demo表，那么就会生成以下三个文件：\n   1.tb_demo.frm，存储表定义；\n   2.tb_demo.MYD，存储数据；\n   3.tb_demo.MYI，存储索引。\n   MyISAM表无法处理事务，这就意味着有事务处理需求的表，不能使用MyISAM存储引擎。MyISAM存储引擎特别适合在以下几种情况下使用：\n   1.选择密集型的表。MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。\n   2.插入密集型的表。MyISAM的并发插入特性允许同时选择和插入数据。例如：MyISAM存储引擎很适合管理邮件或Web服务器日志数据。\n\n### InnoDB\n   InnoDB是一个健壮的事务型存储引擎(支持事务安全)，这种存储引擎已经被很多互联网公司使用，为用户操作非常大的数据存储提供了一个强大的解决方案。MySQL 5.6.13版，InnoDB就是作为默认的存储引擎。InnoDB还引入了行级锁定和外键约束，在以下场合下，使用InnoDB是最理想的选择：\n   1.更新密集的表,InnoDB存储引擎特别适合处理多重并发的更新请求。\n   2.事务，InnoDB存储引擎是支持事务的标准MySQL存储引擎。\n   3.自动灾难恢复与其它存储引擎不同，InnoDB表能够自动从灾难中恢复。\n   4.外键约束，MySQL支持外键的存储引擎只有InnoDB。\n   5.支持自动增加列AUTO_INCREMENT属性。\n   一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB是不错的选择。\n\n### MEMORY\n   使用MySQL Memory存储引擎的出发点是速度。为得到最快的响应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提供很高的性能，但当mysqld守护进程崩溃时，所有的Memory数据都会丢失。获得速度的同时也带来了一些缺陷。它要求存储在Memory数据表里的数据使用的是长度不变的格式，这意味着不能使用BLOB和TEXT这样的长度可变的数据类型，VARCHAR是一种长度可变的类型，但因为它在MySQL内部当做长度固定不变的CHAR类型，所以可以使用。\n   一般在以下几种情况下使用Memory存储引擎：\n   1.目标数据较小，而且被非常频繁地访问。在内存中存放数据，所以会造成内存的使用，可以通过参数max_heap_table_size控制Memory表的大小，设置此参数，就可以限制Memory表的最大大小。\n   2.如果数据是临时的，而且要求必须立即可用，那么就可以存放在内存表中。\n   3.存储在Memory表中的数据如果突然丢失，不会对应用服务产生实质的负面影响。\n   Memory同时支持散列索引和B树索引。B树索引的优于散列索引的是，可以使用部分查询和通配查询，也可以使用<、>和>=等操作符方便数据挖掘。散列索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了，因此散列索引值适合使用在=和<>的操作符中，不适合在<或>操作符中，也同样不适合用在order by子句中。\n   使用MEMORY引擎示例：\n``` sql\n create table users\n (\n     id smallint unsigned not null auto_increment,\n     username varchar(15) not null,\n     pwd varchar(15) not null,\n     index using hash (username),** index using btree (username)**\n     primary key (id)\n )engine=memory;\n```\n在username字段上使用了HASH散列索引\n\n### MERGE\n  MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表结构必须完全相同，尽管其使用不如其它引擎突出，但是在某些情况下非常有用。说白了，Merge表就是几个相同MyISAM表的聚合器；Merge表中并没有数据，对Merge类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行操作。Merge存储引擎的使用场景。\n  对于服务器日志这种信息，一般常用的存储策略是将数据分成很多表，每个名称与特定的时间端相关。例如：可以用12个相同的表来存储服务器日志数据，每个表用对应各个月份的名字来命名。当有必要基于所有12个日志表的数据来生成报表，这意味着需要编写并更新多表查询，以反映这些表中的信息。与其编写这些可能出现错误的查询，不如将这些表合并起来使用一条查询，之后再删除Merge表，而不影响原来的数据，删除Merge表只是删除Merge表的定义，对内部的表没有任何影响。\n\n### ARCHIVE\n  Archive是归档的意思，在归档之后很多的高级功能就不再支持了，仅仅支持最基本的插入和查询两种功能。在MySQL 5.5版以前，Archive是不支持索引，但是在MySQL 5.5以后的版本中就开始支持索引了。Archive拥有很好的压缩机制，它使用zlib压缩库，在记录被请求时会实时压缩，所以它经常被用来当做仓库使用。\n \n### NDB\nMySQL 收购的一个集群存储引擎，类似于ORACLE的RAC引擎，但是NDB是share nothing集群架构。NDB的数据都是存储在内存中，所以主键的查找速率很快，并且可以通过增加存储结点，线性增加数据库的性能。\n \n##查看MySql服务器支持的存储引擎\n``` bash\nshow engines\n```\n\n## 存储引擎的选择标准\n（1）选择标准可以分为：\n（2）是否需要支持事务；\n（3）是否需要使用热备；\n（4）崩溃恢复：能否接受崩溃；\n（5）是否需要外键支持；\n","slug":"笔记/MySQL/MySQL存储引擎","published":1,"updated":"2017-06-16T07:27:29.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3zlkzy5000bkct7gjyj0bcc","content":"<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>   关系数据库表是用于存储和组织信息的数据结构，可以将表理解为由行和列组成的表格，类似于Excel的电子表格的形式。有的表简单，有的表复杂，<a id=\"more\"></a>有的表根本不用来存储任何长期的数据，有的表读取时非常快，但是插入数据时去很差；而我们在实际开发过程中，就可能需要各种各样的表，不同的表，就意味着存储不同类型的数据，数据的处理上也会存在着差异，那么对于MySQL来说，它提供了很多种类型的存储引擎，我们可以根据对数据处理的需求，选择不同的存储引擎，从而最大限度的利用MySQL强大的功能。下面就对MySQL支持的存储引擎进行简单的介绍。<br><img src=\"/img/MySQL/MySql-engines.jpg\" width=\"650\" height=\"800\"></p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>   MyISAM表是独立于操作系统的，这说明可以轻松地将其从Windows服务器移植到Linux服务器；每当我们建立一个MyISAM引擎的表时，就会在本地磁盘上建立三个文件，文件名就是表名。例如，我建立了一个MyISAM引擎的tb_Demo表，那么就会生成以下三个文件：<br>   1.tb_demo.frm，存储表定义；<br>   2.tb_demo.MYD，存储数据；<br>   3.tb_demo.MYI，存储索引。<br>   MyISAM表无法处理事务，这就意味着有事务处理需求的表，不能使用MyISAM存储引擎。MyISAM存储引擎特别适合在以下几种情况下使用：<br>   1.选择密集型的表。MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。<br>   2.插入密集型的表。MyISAM的并发插入特性允许同时选择和插入数据。例如：MyISAM存储引擎很适合管理邮件或Web服务器日志数据。</p>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>   InnoDB是一个健壮的事务型存储引擎(支持事务安全)，这种存储引擎已经被很多互联网公司使用，为用户操作非常大的数据存储提供了一个强大的解决方案。MySQL 5.6.13版，InnoDB就是作为默认的存储引擎。InnoDB还引入了行级锁定和外键约束，在以下场合下，使用InnoDB是最理想的选择：<br>   1.更新密集的表,InnoDB存储引擎特别适合处理多重并发的更新请求。<br>   2.事务，InnoDB存储引擎是支持事务的标准MySQL存储引擎。<br>   3.自动灾难恢复与其它存储引擎不同，InnoDB表能够自动从灾难中恢复。<br>   4.外键约束，MySQL支持外键的存储引擎只有InnoDB。<br>   5.支持自动增加列AUTO_INCREMENT属性。<br>   一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB是不错的选择。</p>\n<h3 id=\"MEMORY\"><a href=\"#MEMORY\" class=\"headerlink\" title=\"MEMORY\"></a>MEMORY</h3><p>   使用MySQL Memory存储引擎的出发点是速度。为得到最快的响应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提供很高的性能，但当mysqld守护进程崩溃时，所有的Memory数据都会丢失。获得速度的同时也带来了一些缺陷。它要求存储在Memory数据表里的数据使用的是长度不变的格式，这意味着不能使用BLOB和TEXT这样的长度可变的数据类型，VARCHAR是一种长度可变的类型，但因为它在MySQL内部当做长度固定不变的CHAR类型，所以可以使用。<br>   一般在以下几种情况下使用Memory存储引擎：<br>   1.目标数据较小，而且被非常频繁地访问。在内存中存放数据，所以会造成内存的使用，可以通过参数max_heap_table_size控制Memory表的大小，设置此参数，就可以限制Memory表的最大大小。<br>   2.如果数据是临时的，而且要求必须立即可用，那么就可以存放在内存表中。<br>   3.存储在Memory表中的数据如果突然丢失，不会对应用服务产生实质的负面影响。<br>   Memory同时支持散列索引和B树索引。B树索引的优于散列索引的是，可以使用部分查询和通配查询，也可以使用&lt;、&gt;和&gt;=等操作符方便数据挖掘。散列索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了，因此散列索引值适合使用在=和&lt;&gt;的操作符中，不适合在&lt;或&gt;操作符中，也同样不适合用在order by子句中。<br>   使用MEMORY引擎示例：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">users</span></div><div class=\"line\">(</div><div class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">smallint</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">    username <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</div><div class=\"line\">    pwd <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</div><div class=\"line\">    <span class=\"keyword\">index</span> <span class=\"keyword\">using</span> <span class=\"keyword\">hash</span> (username),** <span class=\"keyword\">index</span> <span class=\"keyword\">using</span> btree (username)**</div><div class=\"line\">    primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</div><div class=\"line\">)<span class=\"keyword\">engine</span>=<span class=\"keyword\">memory</span>;</div></pre></td></tr></table></figure></p>\n<p>在username字段上使用了HASH散列索引</p>\n<h3 id=\"MERGE\"><a href=\"#MERGE\" class=\"headerlink\" title=\"MERGE\"></a>MERGE</h3><p>  MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表结构必须完全相同，尽管其使用不如其它引擎突出，但是在某些情况下非常有用。说白了，Merge表就是几个相同MyISAM表的聚合器；Merge表中并没有数据，对Merge类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行操作。Merge存储引擎的使用场景。<br>  对于服务器日志这种信息，一般常用的存储策略是将数据分成很多表，每个名称与特定的时间端相关。例如：可以用12个相同的表来存储服务器日志数据，每个表用对应各个月份的名字来命名。当有必要基于所有12个日志表的数据来生成报表，这意味着需要编写并更新多表查询，以反映这些表中的信息。与其编写这些可能出现错误的查询，不如将这些表合并起来使用一条查询，之后再删除Merge表，而不影响原来的数据，删除Merge表只是删除Merge表的定义，对内部的表没有任何影响。</p>\n<h3 id=\"ARCHIVE\"><a href=\"#ARCHIVE\" class=\"headerlink\" title=\"ARCHIVE\"></a>ARCHIVE</h3><p>  Archive是归档的意思，在归档之后很多的高级功能就不再支持了，仅仅支持最基本的插入和查询两种功能。在MySQL 5.5版以前，Archive是不支持索引，但是在MySQL 5.5以后的版本中就开始支持索引了。Archive拥有很好的压缩机制，它使用zlib压缩库，在记录被请求时会实时压缩，所以它经常被用来当做仓库使用。</p>\n<h3 id=\"NDB\"><a href=\"#NDB\" class=\"headerlink\" title=\"NDB\"></a>NDB</h3><p>MySQL 收购的一个集群存储引擎，类似于ORACLE的RAC引擎，但是NDB是share nothing集群架构。NDB的数据都是存储在内存中，所以主键的查找速率很快，并且可以通过增加存储结点，线性增加数据库的性能。</p>\n<p>##查看MySql服务器支持的存储引擎<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show engines</div></pre></td></tr></table></figure></p>\n<h2 id=\"存储引擎的选择标准\"><a href=\"#存储引擎的选择标准\" class=\"headerlink\" title=\"存储引擎的选择标准\"></a>存储引擎的选择标准</h2><p>（1）选择标准可以分为：<br>（2）是否需要支持事务；<br>（3）是否需要使用热备；<br>（4）崩溃恢复：能否接受崩溃；<br>（5）是否需要外键支持；</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>   关系数据库表是用于存储和组织信息的数据结构，可以将表理解为由行和列组成的表格，类似于Excel的电子表格的形式。有的表简单，有的表复杂，","more":"有的表根本不用来存储任何长期的数据，有的表读取时非常快，但是插入数据时去很差；而我们在实际开发过程中，就可能需要各种各样的表，不同的表，就意味着存储不同类型的数据，数据的处理上也会存在着差异，那么对于MySQL来说，它提供了很多种类型的存储引擎，我们可以根据对数据处理的需求，选择不同的存储引擎，从而最大限度的利用MySQL强大的功能。下面就对MySQL支持的存储引擎进行简单的介绍。<br><img src=\"/img/MySQL/MySql-engines.jpg\" width=\"650\" height=\"800\"></p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>   MyISAM表是独立于操作系统的，这说明可以轻松地将其从Windows服务器移植到Linux服务器；每当我们建立一个MyISAM引擎的表时，就会在本地磁盘上建立三个文件，文件名就是表名。例如，我建立了一个MyISAM引擎的tb_Demo表，那么就会生成以下三个文件：<br>   1.tb_demo.frm，存储表定义；<br>   2.tb_demo.MYD，存储数据；<br>   3.tb_demo.MYI，存储索引。<br>   MyISAM表无法处理事务，这就意味着有事务处理需求的表，不能使用MyISAM存储引擎。MyISAM存储引擎特别适合在以下几种情况下使用：<br>   1.选择密集型的表。MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。<br>   2.插入密集型的表。MyISAM的并发插入特性允许同时选择和插入数据。例如：MyISAM存储引擎很适合管理邮件或Web服务器日志数据。</p>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>   InnoDB是一个健壮的事务型存储引擎(支持事务安全)，这种存储引擎已经被很多互联网公司使用，为用户操作非常大的数据存储提供了一个强大的解决方案。MySQL 5.6.13版，InnoDB就是作为默认的存储引擎。InnoDB还引入了行级锁定和外键约束，在以下场合下，使用InnoDB是最理想的选择：<br>   1.更新密集的表,InnoDB存储引擎特别适合处理多重并发的更新请求。<br>   2.事务，InnoDB存储引擎是支持事务的标准MySQL存储引擎。<br>   3.自动灾难恢复与其它存储引擎不同，InnoDB表能够自动从灾难中恢复。<br>   4.外键约束，MySQL支持外键的存储引擎只有InnoDB。<br>   5.支持自动增加列AUTO_INCREMENT属性。<br>   一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB是不错的选择。</p>\n<h3 id=\"MEMORY\"><a href=\"#MEMORY\" class=\"headerlink\" title=\"MEMORY\"></a>MEMORY</h3><p>   使用MySQL Memory存储引擎的出发点是速度。为得到最快的响应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提供很高的性能，但当mysqld守护进程崩溃时，所有的Memory数据都会丢失。获得速度的同时也带来了一些缺陷。它要求存储在Memory数据表里的数据使用的是长度不变的格式，这意味着不能使用BLOB和TEXT这样的长度可变的数据类型，VARCHAR是一种长度可变的类型，但因为它在MySQL内部当做长度固定不变的CHAR类型，所以可以使用。<br>   一般在以下几种情况下使用Memory存储引擎：<br>   1.目标数据较小，而且被非常频繁地访问。在内存中存放数据，所以会造成内存的使用，可以通过参数max_heap_table_size控制Memory表的大小，设置此参数，就可以限制Memory表的最大大小。<br>   2.如果数据是临时的，而且要求必须立即可用，那么就可以存放在内存表中。<br>   3.存储在Memory表中的数据如果突然丢失，不会对应用服务产生实质的负面影响。<br>   Memory同时支持散列索引和B树索引。B树索引的优于散列索引的是，可以使用部分查询和通配查询，也可以使用&lt;、&gt;和&gt;=等操作符方便数据挖掘。散列索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了，因此散列索引值适合使用在=和&lt;&gt;的操作符中，不适合在&lt;或&gt;操作符中，也同样不适合用在order by子句中。<br>   使用MEMORY引擎示例：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"keyword\">users</span></div><div class=\"line\">(</div><div class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">smallint</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">    username <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</div><div class=\"line\">    pwd <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</div><div class=\"line\">    <span class=\"keyword\">index</span> <span class=\"keyword\">using</span> <span class=\"keyword\">hash</span> (username),** <span class=\"keyword\">index</span> <span class=\"keyword\">using</span> btree (username)**</div><div class=\"line\">    primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</div><div class=\"line\">)<span class=\"keyword\">engine</span>=<span class=\"keyword\">memory</span>;</div></pre></td></tr></table></figure></p>\n<p>在username字段上使用了HASH散列索引</p>\n<h3 id=\"MERGE\"><a href=\"#MERGE\" class=\"headerlink\" title=\"MERGE\"></a>MERGE</h3><p>  MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表结构必须完全相同，尽管其使用不如其它引擎突出，但是在某些情况下非常有用。说白了，Merge表就是几个相同MyISAM表的聚合器；Merge表中并没有数据，对Merge类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行操作。Merge存储引擎的使用场景。<br>  对于服务器日志这种信息，一般常用的存储策略是将数据分成很多表，每个名称与特定的时间端相关。例如：可以用12个相同的表来存储服务器日志数据，每个表用对应各个月份的名字来命名。当有必要基于所有12个日志表的数据来生成报表，这意味着需要编写并更新多表查询，以反映这些表中的信息。与其编写这些可能出现错误的查询，不如将这些表合并起来使用一条查询，之后再删除Merge表，而不影响原来的数据，删除Merge表只是删除Merge表的定义，对内部的表没有任何影响。</p>\n<h3 id=\"ARCHIVE\"><a href=\"#ARCHIVE\" class=\"headerlink\" title=\"ARCHIVE\"></a>ARCHIVE</h3><p>  Archive是归档的意思，在归档之后很多的高级功能就不再支持了，仅仅支持最基本的插入和查询两种功能。在MySQL 5.5版以前，Archive是不支持索引，但是在MySQL 5.5以后的版本中就开始支持索引了。Archive拥有很好的压缩机制，它使用zlib压缩库，在记录被请求时会实时压缩，所以它经常被用来当做仓库使用。</p>\n<h3 id=\"NDB\"><a href=\"#NDB\" class=\"headerlink\" title=\"NDB\"></a>NDB</h3><p>MySQL 收购的一个集群存储引擎，类似于ORACLE的RAC引擎，但是NDB是share nothing集群架构。NDB的数据都是存储在内存中，所以主键的查找速率很快，并且可以通过增加存储结点，线性增加数据库的性能。</p>\n<p>##查看MySql服务器支持的存储引擎<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show engines</div></pre></td></tr></table></figure></p>\n<h2 id=\"存储引擎的选择标准\"><a href=\"#存储引擎的选择标准\" class=\"headerlink\" title=\"存储引擎的选择标准\"></a>存储引擎的选择标准</h2><p>（1）选择标准可以分为：<br>（2）是否需要支持事务；<br>（3）是否需要使用热备；<br>（4）崩溃恢复：能否接受崩溃；<br>（5）是否需要外键支持；</p>"},{"title":"MySQL分片","date":"2017-02-14T07:08:26.000Z","_content":"## sharding\n MySQL5以后提供了Sharding的能力，其目的就是为突破单节点数据服务器I/O能力限制，解决数据库Scale Out水平扩展的问题。<!-- more -->通过Sharding可以将数据按照物理位置贴合用户分布，得到更加快速的响应；操作庞然大物总是让人头疼，Sharding将数据分块，更小的数据集操作汇总能够得到更加的体验；分片使得数据分摊在各个数据节点，对其操作实现负载均衡！ \n ### 垂直分区\n 以表为单位，把不同的表分散到不同的数据库或主机上。特点是规则简单，实施方便，适合业务之间耦合度低的系统。\n ### 水平分区\n 以行为单位，将同一个表中的数据按照某种条件拆分到不同的数据库或主机上。特点是相对复杂，适合单表巨大的系统。\n ### 静态分片模式\n 静态分片模式，即分区键是静态分配的，一般使用范围或哈希函数，例如深圳团队放到一个分片，北京团队放到另外一个分片；或者编号为0096开头的员工放到一个分片，而0199开头的员工放到另外一个分片。这种模式虽然实现简单，但明显的缺陷便是存在数据不均匀的情况。\n ### 动态分片模式\n 动态分片模式，即分区函数将从字典中查找分区键，然后定位具体哪个分片存储了数据。这种模式比静态模式更加灵活，但是需要一个集中存储来存放字典，每次查找数据都需要执行2次查询，并且集中存储本身还可能存在单点故障。 \n ","source":"_posts/笔记/MySQL/MySQL分片扩展.md","raw":"---\ntitle: MySQL分片\ndate: 2017-02-14 15:08:26\ntags: [MySQL,分片]\ncategories: 笔记\n---\n## sharding\n MySQL5以后提供了Sharding的能力，其目的就是为突破单节点数据服务器I/O能力限制，解决数据库Scale Out水平扩展的问题。<!-- more -->通过Sharding可以将数据按照物理位置贴合用户分布，得到更加快速的响应；操作庞然大物总是让人头疼，Sharding将数据分块，更小的数据集操作汇总能够得到更加的体验；分片使得数据分摊在各个数据节点，对其操作实现负载均衡！ \n ### 垂直分区\n 以表为单位，把不同的表分散到不同的数据库或主机上。特点是规则简单，实施方便，适合业务之间耦合度低的系统。\n ### 水平分区\n 以行为单位，将同一个表中的数据按照某种条件拆分到不同的数据库或主机上。特点是相对复杂，适合单表巨大的系统。\n ### 静态分片模式\n 静态分片模式，即分区键是静态分配的，一般使用范围或哈希函数，例如深圳团队放到一个分片，北京团队放到另外一个分片；或者编号为0096开头的员工放到一个分片，而0199开头的员工放到另外一个分片。这种模式虽然实现简单，但明显的缺陷便是存在数据不均匀的情况。\n ### 动态分片模式\n 动态分片模式，即分区函数将从字典中查找分区键，然后定位具体哪个分片存储了数据。这种模式比静态模式更加灵活，但是需要一个集中存储来存放字典，每次查找数据都需要执行2次查询，并且集中存储本身还可能存在单点故障。 \n ","slug":"笔记/MySQL/MySQL分片扩展","published":1,"updated":"2017-06-16T07:27:29.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3zlkzy6000ckct7z1motvwv","content":"<h2 id=\"sharding\"><a href=\"#sharding\" class=\"headerlink\" title=\"sharding\"></a>sharding</h2><p> MySQL5以后提供了Sharding的能力，其目的就是为突破单节点数据服务器I/O能力限制，解决数据库Scale Out水平扩展的问题。<a id=\"more\"></a>通过Sharding可以将数据按照物理位置贴合用户分布，得到更加快速的响应；操作庞然大物总是让人头疼，Sharding将数据分块，更小的数据集操作汇总能够得到更加的体验；分片使得数据分摊在各个数据节点，对其操作实现负载均衡！ </p>\n<h3 id=\"垂直分区\"><a href=\"#垂直分区\" class=\"headerlink\" title=\"垂直分区\"></a>垂直分区</h3><p> 以表为单位，把不同的表分散到不同的数据库或主机上。特点是规则简单，实施方便，适合业务之间耦合度低的系统。</p>\n<h3 id=\"水平分区\"><a href=\"#水平分区\" class=\"headerlink\" title=\"水平分区\"></a>水平分区</h3><p> 以行为单位，将同一个表中的数据按照某种条件拆分到不同的数据库或主机上。特点是相对复杂，适合单表巨大的系统。</p>\n<h3 id=\"静态分片模式\"><a href=\"#静态分片模式\" class=\"headerlink\" title=\"静态分片模式\"></a>静态分片模式</h3><p> 静态分片模式，即分区键是静态分配的，一般使用范围或哈希函数，例如深圳团队放到一个分片，北京团队放到另外一个分片；或者编号为0096开头的员工放到一个分片，而0199开头的员工放到另外一个分片。这种模式虽然实现简单，但明显的缺陷便是存在数据不均匀的情况。</p>\n<h3 id=\"动态分片模式\"><a href=\"#动态分片模式\" class=\"headerlink\" title=\"动态分片模式\"></a>动态分片模式</h3><p> 动态分片模式，即分区函数将从字典中查找分区键，然后定位具体哪个分片存储了数据。这种模式比静态模式更加灵活，但是需要一个集中存储来存放字典，每次查找数据都需要执行2次查询，并且集中存储本身还可能存在单点故障。 </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"sharding\"><a href=\"#sharding\" class=\"headerlink\" title=\"sharding\"></a>sharding</h2><p> MySQL5以后提供了Sharding的能力，其目的就是为突破单节点数据服务器I/O能力限制，解决数据库Scale Out水平扩展的问题。","more":"通过Sharding可以将数据按照物理位置贴合用户分布，得到更加快速的响应；操作庞然大物总是让人头疼，Sharding将数据分块，更小的数据集操作汇总能够得到更加的体验；分片使得数据分摊在各个数据节点，对其操作实现负载均衡！ </p>\n<h3 id=\"垂直分区\"><a href=\"#垂直分区\" class=\"headerlink\" title=\"垂直分区\"></a>垂直分区</h3><p> 以表为单位，把不同的表分散到不同的数据库或主机上。特点是规则简单，实施方便，适合业务之间耦合度低的系统。</p>\n<h3 id=\"水平分区\"><a href=\"#水平分区\" class=\"headerlink\" title=\"水平分区\"></a>水平分区</h3><p> 以行为单位，将同一个表中的数据按照某种条件拆分到不同的数据库或主机上。特点是相对复杂，适合单表巨大的系统。</p>\n<h3 id=\"静态分片模式\"><a href=\"#静态分片模式\" class=\"headerlink\" title=\"静态分片模式\"></a>静态分片模式</h3><p> 静态分片模式，即分区键是静态分配的，一般使用范围或哈希函数，例如深圳团队放到一个分片，北京团队放到另外一个分片；或者编号为0096开头的员工放到一个分片，而0199开头的员工放到另外一个分片。这种模式虽然实现简单，但明显的缺陷便是存在数据不均匀的情况。</p>\n<h3 id=\"动态分片模式\"><a href=\"#动态分片模式\" class=\"headerlink\" title=\"动态分片模式\"></a>动态分片模式</h3><p> 动态分片模式，即分区函数将从字典中查找分区键，然后定位具体哪个分片存储了数据。这种模式比静态模式更加灵活，但是需要一个集中存储来存放字典，每次查找数据都需要执行2次查询，并且集中存储本身还可能存在单点故障。 </p>"},{"title":"存储过程清库","date":"2017-02-14T07:08:26.000Z","_content":"MyBatis调用存储过程清库<!-- more --> \n### 清库存储过程（清库注意使用EXISTS）\n1.接收入参的存储过程（一）\n```sql\nCREATE OR REPLACE \nPROCEDURE CLEAR_PLATFORM_DATA(P_platformId IN NUMBER)\n  IS\n  v_platformStatus VARCHAR2(100);\n  BEGIN\n    SELECT ONLINE_STATUS INTO v_platformStatus FROM T_PLATFORM_BUSI WHERE PLATFORM_ID = P_platformId;\n    IF v_platformStatus='ONLINE' THEN\n      RETURN;\n        ELSIF v_platformStatus='OUTLINE' THEN\n\n            DELETE FROM T_USER_PERSONAL t WHERE EXISTS (SELECT 1 FROM T_USER WHERE T_USER.ID = t.ID AND T_USER.PLATFORM_ID = P_platformId);\n            DELETE FROM T_USER_ORGANIZATION t WHERE EXISTS (SELECT 1 FROM T_USER WHERE T_USER.ID = t.ID AND T_USER.PLATFORM_ID = P_platformId);\n            DELETE FROM T_USER WHERE PLATFORM_ID = P_platformId;\n            DELETE FROM T_REGISTER_ORDER WHERE PLATFORM_ID = P_platformId;\n\n            DELETE FROM T_TRANSACTION_RECORD WHERE SOURCE_PLATFORM_ID = P_platformId;\n            DELETE FROM T_TRANSACTION_ORDER WHERE PLATFORM_ID = P_platformId;\n\n            DELETE FROM T_PROJECT_DEBENTURE_REC WHERE PLATFORM_ID = P_platformId;\n            DELETE FROM T_PROJECT_DAILY_REPORT WHERE PLATFORM_ID = P_platformId;\n            DELETE FROM T_PROJECT_EXTEND t WHERE EXISTS (SELECT 1 FROM T_PROJECT WHERE T_PROJECT.ID = t.ID AND T_PROJECT.BORROWER_PLATFORM_ID = P_platformId);\n            DELETE FROM T_PROJECT WHERE BORROWER_PLATFORM_ID = P_platformId;\n            DELETE FROM T_FREEZE_ORDER WHERE PLATFORM_ID = P_platformId;\n      DELETE FROM T_USER_AUTHORIZATION WHERE PLATFORM_ID = P_platformId;\n\n      COMMIT;\n        ELSE\n            NULL;\n        END IF;\n  END;\n```\n\n2.接收入参的存储过程（二）\n\n```sql\nCREATE OR REPLACE \nPROCEDURE CLEAR_ACCOUNT_PLATFORM_DATA(P_platformId IN VARCHAR) AS\nBEGIN\n    DELETE FROM T_ACCOUNT_FREEZE t WHERE EXISTS \n     (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);\n\n    DELETE FROM T_ACCOUNT_HISTORY t WHERE EXISTS \n      (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);\n\n    DELETE FROM T_ACCOUNT_SNAPSHOT t WHERE EXISTS \n      (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);\n\n  DELETE FROM T_ACCOUNT WHERE MERCHANT_NO = P_platformId;\nCOMMIT;\nEND;\n``` \n\n### MyBatis调用存储过程\n1.mapper.xml\n\n```sql\n<select id=\"callClearPlatformData\">\n    <![CDATA[\n      call CLEAR_PLATFORM_DATA(#{platformId,jdbcType=NUMERIC})\n    ]]>\n  </select>\n  \n``` \n\n2.mapper\n\n```sql\nvoid callClearPlatformData(@Param(\"platformId\") long platformId);\n```\n\n这样就可以直接使用了！！！","source":"_posts/笔记/SQL/清库存储过程.md","raw":"---\ntitle: 存储过程清库\ndate: 2017-02-14 15:08:26\ntags: [SQL,存储过程，MyBatis]\ncategories: 笔记\n---\nMyBatis调用存储过程清库<!-- more --> \n### 清库存储过程（清库注意使用EXISTS）\n1.接收入参的存储过程（一）\n```sql\nCREATE OR REPLACE \nPROCEDURE CLEAR_PLATFORM_DATA(P_platformId IN NUMBER)\n  IS\n  v_platformStatus VARCHAR2(100);\n  BEGIN\n    SELECT ONLINE_STATUS INTO v_platformStatus FROM T_PLATFORM_BUSI WHERE PLATFORM_ID = P_platformId;\n    IF v_platformStatus='ONLINE' THEN\n      RETURN;\n        ELSIF v_platformStatus='OUTLINE' THEN\n\n            DELETE FROM T_USER_PERSONAL t WHERE EXISTS (SELECT 1 FROM T_USER WHERE T_USER.ID = t.ID AND T_USER.PLATFORM_ID = P_platformId);\n            DELETE FROM T_USER_ORGANIZATION t WHERE EXISTS (SELECT 1 FROM T_USER WHERE T_USER.ID = t.ID AND T_USER.PLATFORM_ID = P_platformId);\n            DELETE FROM T_USER WHERE PLATFORM_ID = P_platformId;\n            DELETE FROM T_REGISTER_ORDER WHERE PLATFORM_ID = P_platformId;\n\n            DELETE FROM T_TRANSACTION_RECORD WHERE SOURCE_PLATFORM_ID = P_platformId;\n            DELETE FROM T_TRANSACTION_ORDER WHERE PLATFORM_ID = P_platformId;\n\n            DELETE FROM T_PROJECT_DEBENTURE_REC WHERE PLATFORM_ID = P_platformId;\n            DELETE FROM T_PROJECT_DAILY_REPORT WHERE PLATFORM_ID = P_platformId;\n            DELETE FROM T_PROJECT_EXTEND t WHERE EXISTS (SELECT 1 FROM T_PROJECT WHERE T_PROJECT.ID = t.ID AND T_PROJECT.BORROWER_PLATFORM_ID = P_platformId);\n            DELETE FROM T_PROJECT WHERE BORROWER_PLATFORM_ID = P_platformId;\n            DELETE FROM T_FREEZE_ORDER WHERE PLATFORM_ID = P_platformId;\n      DELETE FROM T_USER_AUTHORIZATION WHERE PLATFORM_ID = P_platformId;\n\n      COMMIT;\n        ELSE\n            NULL;\n        END IF;\n  END;\n```\n\n2.接收入参的存储过程（二）\n\n```sql\nCREATE OR REPLACE \nPROCEDURE CLEAR_ACCOUNT_PLATFORM_DATA(P_platformId IN VARCHAR) AS\nBEGIN\n    DELETE FROM T_ACCOUNT_FREEZE t WHERE EXISTS \n     (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);\n\n    DELETE FROM T_ACCOUNT_HISTORY t WHERE EXISTS \n      (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);\n\n    DELETE FROM T_ACCOUNT_SNAPSHOT t WHERE EXISTS \n      (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);\n\n  DELETE FROM T_ACCOUNT WHERE MERCHANT_NO = P_platformId;\nCOMMIT;\nEND;\n``` \n\n### MyBatis调用存储过程\n1.mapper.xml\n\n```sql\n<select id=\"callClearPlatformData\">\n    <![CDATA[\n      call CLEAR_PLATFORM_DATA(#{platformId,jdbcType=NUMERIC})\n    ]]>\n  </select>\n  \n``` \n\n2.mapper\n\n```sql\nvoid callClearPlatformData(@Param(\"platformId\") long platformId);\n```\n\n这样就可以直接使用了！！！","slug":"笔记/SQL/清库存储过程","published":1,"updated":"2017-06-16T08:33:40.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3zlkzy9000fkct7tezhkjx3","content":"<p>MyBatis调用存储过程清库<a id=\"more\"></a> </p>\n<h3 id=\"清库存储过程（清库注意使用EXISTS）\"><a href=\"#清库存储过程（清库注意使用EXISTS）\" class=\"headerlink\" title=\"清库存储过程（清库注意使用EXISTS）\"></a>清库存储过程（清库注意使用EXISTS）</h3><p>1.接收入参的存储过程（一）<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">REPLACE</span> </div><div class=\"line\"><span class=\"keyword\">PROCEDURE</span> CLEAR_PLATFORM_DATA(P_platformId <span class=\"keyword\">IN</span> <span class=\"built_in\">NUMBER</span>)</div><div class=\"line\">  <span class=\"keyword\">IS</span></div><div class=\"line\">  v_platformStatus VARCHAR2(<span class=\"number\">100</span>);</div><div class=\"line\">  <span class=\"keyword\">BEGIN</span></div><div class=\"line\">    <span class=\"keyword\">SELECT</span> ONLINE_STATUS <span class=\"keyword\">INTO</span> v_platformStatus <span class=\"keyword\">FROM</span> T_PLATFORM_BUSI <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">    IF v_platformStatus='ONLINE' THEN</div><div class=\"line\">      RETURN;</div><div class=\"line\">        ELSIF v_platformStatus='OUTLINE' THEN</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_USER_PERSONAL t <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> T_USER <span class=\"keyword\">WHERE</span> T_USER.ID = t.ID <span class=\"keyword\">AND</span> T_USER.PLATFORM_ID = P_platformId);</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_USER_ORGANIZATION t <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> T_USER <span class=\"keyword\">WHERE</span> T_USER.ID = t.ID <span class=\"keyword\">AND</span> T_USER.PLATFORM_ID = P_platformId);</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_USER <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_REGISTER_ORDER <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_TRANSACTION_RECORD <span class=\"keyword\">WHERE</span> SOURCE_PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_TRANSACTION_ORDER <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_PROJECT_DEBENTURE_REC <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_PROJECT_DAILY_REPORT <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_PROJECT_EXTEND t <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> T_PROJECT <span class=\"keyword\">WHERE</span> T_PROJECT.ID = t.ID <span class=\"keyword\">AND</span> T_PROJECT.BORROWER_PLATFORM_ID = P_platformId);</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_PROJECT <span class=\"keyword\">WHERE</span> BORROWER_PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_FREEZE_ORDER <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">      <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_USER_AUTHORIZATION <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">COMMIT</span>;</div><div class=\"line\">        ELSE</div><div class=\"line\">            NULL;</div><div class=\"line\">        <span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</div><div class=\"line\">  <span class=\"keyword\">END</span>;</div></pre></td></tr></table></figure></p>\n<p>2.接收入参的存储过程（二）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE OR REPLACE </div><div class=\"line\">PROCEDURE CLEAR_ACCOUNT_PLATFORM_DATA(P_platformId IN VARCHAR) AS</div><div class=\"line\">BEGIN</div><div class=\"line\">    DELETE FROM T_ACCOUNT_FREEZE t WHERE EXISTS </div><div class=\"line\">     (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);</div><div class=\"line\"></div><div class=\"line\">    DELETE FROM T_ACCOUNT_HISTORY t WHERE EXISTS </div><div class=\"line\">      (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);</div><div class=\"line\"></div><div class=\"line\">    DELETE FROM T_ACCOUNT_SNAPSHOT t WHERE EXISTS </div><div class=\"line\">      (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);</div><div class=\"line\"></div><div class=\"line\">  DELETE FROM T_ACCOUNT WHERE MERCHANT_NO = P_platformId;</div><div class=\"line\">COMMIT;</div><div class=\"line\">END;</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">### MyBatis调用存储过程</div><div class=\"line\">1.mapper.xml</div><div class=\"line\"></div><div class=\"line\">```sql</div><div class=\"line\">&lt;select id=\"callClearPlatformData\"&gt;</div><div class=\"line\">    &lt;![CDATA[</div><div class=\"line\">      call CLEAR_PLATFORM_DATA(#&#123;platformId,jdbcType=NUMERIC&#125;)</div><div class=\"line\">    ]]&gt;</div><div class=\"line\">  &lt;/select&gt;</div><div class=\"line\">  </div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">2.mapper</div><div class=\"line\"></div><div class=\"line\">```sql</div><div class=\"line\">void callClearPlatformData(@Param(\"platformId\") long platformId);</div></pre></td></tr></table></figure>\n<p>这样就可以直接使用了！！！</p>\n","site":{"data":{}},"excerpt":"<p>MyBatis调用存储过程清库","more":"</p>\n<h3 id=\"清库存储过程（清库注意使用EXISTS）\"><a href=\"#清库存储过程（清库注意使用EXISTS）\" class=\"headerlink\" title=\"清库存储过程（清库注意使用EXISTS）\"></a>清库存储过程（清库注意使用EXISTS）</h3><p>1.接收入参的存储过程（一）<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">REPLACE</span> </div><div class=\"line\"><span class=\"keyword\">PROCEDURE</span> CLEAR_PLATFORM_DATA(P_platformId <span class=\"keyword\">IN</span> <span class=\"built_in\">NUMBER</span>)</div><div class=\"line\">  <span class=\"keyword\">IS</span></div><div class=\"line\">  v_platformStatus VARCHAR2(<span class=\"number\">100</span>);</div><div class=\"line\">  <span class=\"keyword\">BEGIN</span></div><div class=\"line\">    <span class=\"keyword\">SELECT</span> ONLINE_STATUS <span class=\"keyword\">INTO</span> v_platformStatus <span class=\"keyword\">FROM</span> T_PLATFORM_BUSI <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">    IF v_platformStatus='ONLINE' THEN</div><div class=\"line\">      RETURN;</div><div class=\"line\">        ELSIF v_platformStatus='OUTLINE' THEN</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_USER_PERSONAL t <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> T_USER <span class=\"keyword\">WHERE</span> T_USER.ID = t.ID <span class=\"keyword\">AND</span> T_USER.PLATFORM_ID = P_platformId);</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_USER_ORGANIZATION t <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> T_USER <span class=\"keyword\">WHERE</span> T_USER.ID = t.ID <span class=\"keyword\">AND</span> T_USER.PLATFORM_ID = P_platformId);</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_USER <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_REGISTER_ORDER <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_TRANSACTION_RECORD <span class=\"keyword\">WHERE</span> SOURCE_PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_TRANSACTION_ORDER <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_PROJECT_DEBENTURE_REC <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_PROJECT_DAILY_REPORT <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_PROJECT_EXTEND t <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> T_PROJECT <span class=\"keyword\">WHERE</span> T_PROJECT.ID = t.ID <span class=\"keyword\">AND</span> T_PROJECT.BORROWER_PLATFORM_ID = P_platformId);</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_PROJECT <span class=\"keyword\">WHERE</span> BORROWER_PLATFORM_ID = P_platformId;</div><div class=\"line\">            <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_FREEZE_ORDER <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\">      <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> T_USER_AUTHORIZATION <span class=\"keyword\">WHERE</span> PLATFORM_ID = P_platformId;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">COMMIT</span>;</div><div class=\"line\">        ELSE</div><div class=\"line\">            NULL;</div><div class=\"line\">        <span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</div><div class=\"line\">  <span class=\"keyword\">END</span>;</div></pre></td></tr></table></figure></p>\n<p>2.接收入参的存储过程（二）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE OR REPLACE </div><div class=\"line\">PROCEDURE CLEAR_ACCOUNT_PLATFORM_DATA(P_platformId IN VARCHAR) AS</div><div class=\"line\">BEGIN</div><div class=\"line\">    DELETE FROM T_ACCOUNT_FREEZE t WHERE EXISTS </div><div class=\"line\">     (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);</div><div class=\"line\"></div><div class=\"line\">    DELETE FROM T_ACCOUNT_HISTORY t WHERE EXISTS </div><div class=\"line\">      (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);</div><div class=\"line\"></div><div class=\"line\">    DELETE FROM T_ACCOUNT_SNAPSHOT t WHERE EXISTS </div><div class=\"line\">      (SELECT 1 FROM T_ACCOUNT t1 WHERE t1.ID = t.ACCOUNT_ID  AND t1.MERCHANT_NO = P_platformId);</div><div class=\"line\"></div><div class=\"line\">  DELETE FROM T_ACCOUNT WHERE MERCHANT_NO = P_platformId;</div><div class=\"line\">COMMIT;</div><div class=\"line\">END;</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">### MyBatis调用存储过程</div><div class=\"line\">1.mapper.xml</div><div class=\"line\"></div><div class=\"line\">```sql</div><div class=\"line\">&lt;select id=\"callClearPlatformData\"&gt;</div><div class=\"line\">    &lt;![CDATA[</div><div class=\"line\">      call CLEAR_PLATFORM_DATA(#&#123;platformId,jdbcType=NUMERIC&#125;)</div><div class=\"line\">    ]]&gt;</div><div class=\"line\">  &lt;/select&gt;</div><div class=\"line\">  </div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">2.mapper</div><div class=\"line\"></div><div class=\"line\">```sql</div><div class=\"line\">void callClearPlatformData(@Param(\"platformId\") long platformId);</div></pre></td></tr></table></figure>\n<p>这样就可以直接使用了！！！</p>"},{"title":"MySQL数据库锁","date":"2017-02-08T08:42:26.000Z","_content":"## 锁的基本概念\n  锁，在现实生活中是为我们想要隐藏于外界所使用的一种工具。在计算机中，是协调多个进程或线程并发访问某一资源的一种机制。<!-- more -->在数据库当中，除了传统的计算资源（CPU、RAM、I/O等等）的争用之外，数据也是一种供许多用户共享访问的资源。如何保证数据并发访问的一致性、有效性，是所有数据库必须解决的一个问题，锁的冲突也是影响数据库并发访问性能的一个重要因素。从这一角度来说，锁对于数据库而言就显得尤为重要。\n  相对于其他的数据库而言，MySQL的锁机制比较简单，最显著的特点就是不同的存储引擎支持不同的锁机制。根据不同的存储引擎，MySQL中锁的特性可以大致归纳如下：\n  \n  存储引擎 | 行锁| 表锁| 页锁\n  ---|---|---|---\n  MyISAM| 不支持| 支持| 不支持\n  BDB   | 不支持| 支持| 支持\n  InnoDB|  支持 | 支持| 不支持\n  \n### MySQL3种锁的特性：\n   *表级锁*：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。\n   *行级锁*：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。\n   *页面锁*：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。\n   \n   很难笼统的说哪种锁最好，只能根据具体应用的特点来说哪种锁更加合适。仅仅从锁的角度来说的话：表锁更适用于以查询为主，只有少量按索引条件更新数据的应用；行锁更适用于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用。\n### 行锁（Row Lock）\n  对一行记录加锁，只影响一条记录。常用在DML语句中，如INSERT, UPDATE, DELETE等。InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！\n``` sql\n    CREATE TABLE test_index(id int , name VARCHAR(50),age int )engine=innodb ;\n     \n    INSERT INTO test_index values(1,'张一',15);\n     \n    INSERT INTO test_index values(3,'张三',16);\n     \n    INSERT INTO test_index values(4,'张四',17);\n     \n    INSERT INTO test_index values(5,'张五',19);\n     \n    INSERT INTO test_index values(7,'刘琦',19);\n```\n#### 直接解释查询：\n``` sql\n  explain select * from test_index where id = 1;\n```\n  查询结果：type: all ，rows: 5 很明显是会使用全表锁\n``` bash\n    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+\n     \n    | id | select_type | table      | type | possible_keys | key  | key_len | ref  | rows | Extra       |\n     \n    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+\n     \n    |  1 | SIMPLE      | test_index | ALL  | NULL          | NULL | NULL    | NULL |    5 | Using where |\n     \n    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+\n\n```  \n\n####  增加索引，id加唯一索引，age加普通索引\n``` sql\nALTER TABLE test_index\n \nADD UNIQUE uk_id(id),\nADD index idx_age(age);\n \nmysql> explain select * from test_index where id = 1;\n```\n   查询结果：锁定一条记录\n``` sql\n \n+----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+\n \n| id | select_type | table      | type  | possible_keys | key   | key_len | ref   | rows | Extra |\n \n+----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+\n \n|  1 | SIMPLE      | test_index | const | uk_id         | uk_id | 5       | const |    1 | NULL  |\n \n+----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+\n \ntype: const ，key:uk_id,rows:\n```\n\n#### 两个事务，TX1加共享行锁, 查询age=17的记录， TX2往数据库里插入一条age=18的记录  \n``` sql\nset autocommit=0;//MySQL默认操作模式就是autocommit自动提交模式。这就表示除非显式地开始一个事务，\n否则每个查询都被当做一个单独的事务自动执行。我们可以通过设置autocommit的值改变是否是自动提交autocommit模式。\n值0和OFF都是一样的，当然，1也就表示ON。通过以上设置autocommit=0，则用户将一直处于某个事务中，直到执行一条\ncommit提交或rollback语句才会结束当前事务重新开始一个新的事务。\n\nselect * from test_index where age=17 lock in share mode;\n+------+------+------+\n \n| id   | name | age  |\n \n+------+------+------+\n \n|    4 | 张四 |   17 |\n \n+------+------+------+\n \n1 row in set (0.00 sec)\n \n \n \nTX2:\nmysql> set autocommit=0;\n \nmysql> insert test_index values(8,'test',18);\n \nERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction\n\n```\n 显然被锁住的不止age=17的那一行\n 执行sql查看加锁的具体信息\n``` sql\n select * from information_schema.innodb_locks\n```\n### 表锁\n MySQL表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。什么意思呢，就是说对MyISAM表进行读操作时，它不会阻塞其他用户对同一表的读请求，但会阻塞 对同一表的写操作；而对MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作。\n InnoDB锁与MyISAM锁的最大不同在于：一是支持事务（TRANCSACTION），二是采用了行级锁。我们知道事务是由一组SQL语句组成的逻辑处理单元，其有四个属性（简称ACID属性），分别为：\n *原子性（Atomicity）*：事务是一个原子操作单元，其对数据的修改，要么全部执行，要么全都不执行；\n *一致性（Consistent）*：在事务开始和完成时，数据都必须保持一致状态；\n *隔离性（Isolation）*：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行；\n *持久性（Durable）*：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。\n InnoDB有两种模式的行锁：\n *共享锁(S)*：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。\n ``` sql\n     ( Select * from table_name where ......lock in share mode)\n ```\n *排他锁(X)*：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。\n ``` sql\n (select * from table_name where.....for update)\n ```\n 为了允许行锁和表锁共存，实现多粒度锁机制；同时还有两种内部使用的意向锁（都是表锁），分别为意向共享锁和意向排他锁。InnoDB行锁是通过给索引项加锁来实现的，即只有通过索引条件检索数据，InnoDB才使用行级锁，否则将使用表锁！\n*意向共享锁(IS)*\n事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。\n*意向排他锁(IX)*\n事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。\n\n### 悲观锁\n正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据） \n### 乐观锁\n相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。\n而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。\n 本质上，数据库的乐观锁做法和悲观锁做法主要就是解决下面假设的场景，避免丢失更新问题：\n## 并发事务处理带来的问题\n相对于串行处理来说，并发事务处理能大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多的用户。但并发事务处理也会带来一些问题，主要包括以下几种情况。\n*更新丢失（Lost Update）*：当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题－－最后的更新覆盖了由其他事务所做的更新。例如，两个编辑人员制作了同一文档的电子副本。每个编辑人员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖另一个编辑人员所做的更改。如果在一个编辑人员完成并提交事务之前，另一个编辑人员不能访问同一文件，则可避免此问题。\n*脏读（Dirty Reads）*：一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做\"脏读\"。\n*不可重复读（Non-Repeatable Reads）*：一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。\n*幻读（Phantom Reads）*：一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。\n\n[***MySQL锁机制详细参考链接***](http://blog.csdn.net/lishenglong666/article/details/53913126)","source":"_posts/笔记/MySQL/MySQL数据库锁.md","raw":"---\ntitle: MySQL数据库锁\ndate: 2017-02-08 16:42:26\ntags: [MySQL,锁]\ncategories: 笔记\n---\n## 锁的基本概念\n  锁，在现实生活中是为我们想要隐藏于外界所使用的一种工具。在计算机中，是协调多个进程或线程并发访问某一资源的一种机制。<!-- more -->在数据库当中，除了传统的计算资源（CPU、RAM、I/O等等）的争用之外，数据也是一种供许多用户共享访问的资源。如何保证数据并发访问的一致性、有效性，是所有数据库必须解决的一个问题，锁的冲突也是影响数据库并发访问性能的一个重要因素。从这一角度来说，锁对于数据库而言就显得尤为重要。\n  相对于其他的数据库而言，MySQL的锁机制比较简单，最显著的特点就是不同的存储引擎支持不同的锁机制。根据不同的存储引擎，MySQL中锁的特性可以大致归纳如下：\n  \n  存储引擎 | 行锁| 表锁| 页锁\n  ---|---|---|---\n  MyISAM| 不支持| 支持| 不支持\n  BDB   | 不支持| 支持| 支持\n  InnoDB|  支持 | 支持| 不支持\n  \n### MySQL3种锁的特性：\n   *表级锁*：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。\n   *行级锁*：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。\n   *页面锁*：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。\n   \n   很难笼统的说哪种锁最好，只能根据具体应用的特点来说哪种锁更加合适。仅仅从锁的角度来说的话：表锁更适用于以查询为主，只有少量按索引条件更新数据的应用；行锁更适用于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用。\n### 行锁（Row Lock）\n  对一行记录加锁，只影响一条记录。常用在DML语句中，如INSERT, UPDATE, DELETE等。InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！\n``` sql\n    CREATE TABLE test_index(id int , name VARCHAR(50),age int )engine=innodb ;\n     \n    INSERT INTO test_index values(1,'张一',15);\n     \n    INSERT INTO test_index values(3,'张三',16);\n     \n    INSERT INTO test_index values(4,'张四',17);\n     \n    INSERT INTO test_index values(5,'张五',19);\n     \n    INSERT INTO test_index values(7,'刘琦',19);\n```\n#### 直接解释查询：\n``` sql\n  explain select * from test_index where id = 1;\n```\n  查询结果：type: all ，rows: 5 很明显是会使用全表锁\n``` bash\n    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+\n     \n    | id | select_type | table      | type | possible_keys | key  | key_len | ref  | rows | Extra       |\n     \n    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+\n     \n    |  1 | SIMPLE      | test_index | ALL  | NULL          | NULL | NULL    | NULL |    5 | Using where |\n     \n    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+\n\n```  \n\n####  增加索引，id加唯一索引，age加普通索引\n``` sql\nALTER TABLE test_index\n \nADD UNIQUE uk_id(id),\nADD index idx_age(age);\n \nmysql> explain select * from test_index where id = 1;\n```\n   查询结果：锁定一条记录\n``` sql\n \n+----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+\n \n| id | select_type | table      | type  | possible_keys | key   | key_len | ref   | rows | Extra |\n \n+----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+\n \n|  1 | SIMPLE      | test_index | const | uk_id         | uk_id | 5       | const |    1 | NULL  |\n \n+----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+\n \ntype: const ，key:uk_id,rows:\n```\n\n#### 两个事务，TX1加共享行锁, 查询age=17的记录， TX2往数据库里插入一条age=18的记录  \n``` sql\nset autocommit=0;//MySQL默认操作模式就是autocommit自动提交模式。这就表示除非显式地开始一个事务，\n否则每个查询都被当做一个单独的事务自动执行。我们可以通过设置autocommit的值改变是否是自动提交autocommit模式。\n值0和OFF都是一样的，当然，1也就表示ON。通过以上设置autocommit=0，则用户将一直处于某个事务中，直到执行一条\ncommit提交或rollback语句才会结束当前事务重新开始一个新的事务。\n\nselect * from test_index where age=17 lock in share mode;\n+------+------+------+\n \n| id   | name | age  |\n \n+------+------+------+\n \n|    4 | 张四 |   17 |\n \n+------+------+------+\n \n1 row in set (0.00 sec)\n \n \n \nTX2:\nmysql> set autocommit=0;\n \nmysql> insert test_index values(8,'test',18);\n \nERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction\n\n```\n 显然被锁住的不止age=17的那一行\n 执行sql查看加锁的具体信息\n``` sql\n select * from information_schema.innodb_locks\n```\n### 表锁\n MySQL表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。什么意思呢，就是说对MyISAM表进行读操作时，它不会阻塞其他用户对同一表的读请求，但会阻塞 对同一表的写操作；而对MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作。\n InnoDB锁与MyISAM锁的最大不同在于：一是支持事务（TRANCSACTION），二是采用了行级锁。我们知道事务是由一组SQL语句组成的逻辑处理单元，其有四个属性（简称ACID属性），分别为：\n *原子性（Atomicity）*：事务是一个原子操作单元，其对数据的修改，要么全部执行，要么全都不执行；\n *一致性（Consistent）*：在事务开始和完成时，数据都必须保持一致状态；\n *隔离性（Isolation）*：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行；\n *持久性（Durable）*：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。\n InnoDB有两种模式的行锁：\n *共享锁(S)*：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。\n ``` sql\n     ( Select * from table_name where ......lock in share mode)\n ```\n *排他锁(X)*：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。\n ``` sql\n (select * from table_name where.....for update)\n ```\n 为了允许行锁和表锁共存，实现多粒度锁机制；同时还有两种内部使用的意向锁（都是表锁），分别为意向共享锁和意向排他锁。InnoDB行锁是通过给索引项加锁来实现的，即只有通过索引条件检索数据，InnoDB才使用行级锁，否则将使用表锁！\n*意向共享锁(IS)*\n事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。\n*意向排他锁(IX)*\n事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。\n\n### 悲观锁\n正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据） \n### 乐观锁\n相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。\n而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。\n 本质上，数据库的乐观锁做法和悲观锁做法主要就是解决下面假设的场景，避免丢失更新问题：\n## 并发事务处理带来的问题\n相对于串行处理来说，并发事务处理能大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多的用户。但并发事务处理也会带来一些问题，主要包括以下几种情况。\n*更新丢失（Lost Update）*：当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题－－最后的更新覆盖了由其他事务所做的更新。例如，两个编辑人员制作了同一文档的电子副本。每个编辑人员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖另一个编辑人员所做的更改。如果在一个编辑人员完成并提交事务之前，另一个编辑人员不能访问同一文件，则可避免此问题。\n*脏读（Dirty Reads）*：一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做\"脏读\"。\n*不可重复读（Non-Repeatable Reads）*：一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。\n*幻读（Phantom Reads）*：一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。\n\n[***MySQL锁机制详细参考链接***](http://blog.csdn.net/lishenglong666/article/details/53913126)","slug":"笔记/MySQL/MySQL数据库锁","published":1,"updated":"2017-06-16T07:27:29.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3zlkzyc000gkct7it9oey9c","content":"<h2 id=\"锁的基本概念\"><a href=\"#锁的基本概念\" class=\"headerlink\" title=\"锁的基本概念\"></a>锁的基本概念</h2><p>  锁，在现实生活中是为我们想要隐藏于外界所使用的一种工具。在计算机中，是协调多个进程或线程并发访问某一资源的一种机制。<a id=\"more\"></a>在数据库当中，除了传统的计算资源（CPU、RAM、I/O等等）的争用之外，数据也是一种供许多用户共享访问的资源。如何保证数据并发访问的一致性、有效性，是所有数据库必须解决的一个问题，锁的冲突也是影响数据库并发访问性能的一个重要因素。从这一角度来说，锁对于数据库而言就显得尤为重要。<br>  相对于其他的数据库而言，MySQL的锁机制比较简单，最显著的特点就是不同的存储引擎支持不同的锁机制。根据不同的存储引擎，MySQL中锁的特性可以大致归纳如下：</p>\n<table>\n<thead>\n<tr>\n<th>存储引擎</th>\n<th>行锁</th>\n<th>表锁</th>\n<th>页锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>  MyISAM</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>  BDB</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>  InnoDB</td>\n<td>支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"MySQL3种锁的特性：\"><a href=\"#MySQL3种锁的特性：\" class=\"headerlink\" title=\"MySQL3种锁的特性：\"></a>MySQL3种锁的特性：</h3><p>   <em>表级锁</em>：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。<br>   <em>行级锁</em>：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。<br>   <em>页面锁</em>：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>\n<p>   很难笼统的说哪种锁最好，只能根据具体应用的特点来说哪种锁更加合适。仅仅从锁的角度来说的话：表锁更适用于以查询为主，只有少量按索引条件更新数据的应用；行锁更适用于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用。</p>\n<h3 id=\"行锁（Row-Lock）\"><a href=\"#行锁（Row-Lock）\" class=\"headerlink\" title=\"行锁（Row Lock）\"></a>行锁（Row Lock）</h3><p>  对一行记录加锁，只影响一条记录。常用在DML语句中，如INSERT, UPDATE, DELETE等。InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test_index(<span class=\"keyword\">id</span> <span class=\"built_in\">int</span> , <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>),age <span class=\"built_in\">int</span> )<span class=\"keyword\">engine</span>=<span class=\"keyword\">innodb</span> ;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">'张一'</span>,<span class=\"number\">15</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">3</span>,<span class=\"string\">'张三'</span>,<span class=\"number\">16</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">4</span>,<span class=\"string\">'张四'</span>,<span class=\"number\">17</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">5</span>,<span class=\"string\">'张五'</span>,<span class=\"number\">19</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">7</span>,<span class=\"string\">'刘琦'</span>,<span class=\"number\">19</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"直接解释查询：\"><a href=\"#直接解释查询：\" class=\"headerlink\" title=\"直接解释查询：\"></a>直接解释查询：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> test_index <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<p>  查询结果：type: all ，rows: 5 很明显是会使用全表锁<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+</div><div class=\"line\">     </div><div class=\"line\">    | id | select_type | table      | <span class=\"built_in\">type</span> | possible_keys | key  | key_len | ref  | rows | Extra       |</div><div class=\"line\">     </div><div class=\"line\">    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+</div><div class=\"line\">     </div><div class=\"line\">    |  1 | SIMPLE      | test_index | ALL  | NULL          | NULL | NULL    | NULL |    5 | Using <span class=\"built_in\">where</span> |</div><div class=\"line\">     </div><div class=\"line\">    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+</div><div class=\"line\"></div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">####  增加索引，id加唯一索引，age加普通索引</span></div><div class=\"line\">``` sql</div><div class=\"line\">ALTER TABLE test_index</div><div class=\"line\"> </div><div class=\"line\">ADD UNIQUE uk_id(id),</div><div class=\"line\">ADD index idx_age(age);</div><div class=\"line\"> </div><div class=\"line\">mysql&gt; explain select * from test_index <span class=\"built_in\">where</span> id = 1;</div></pre></td></tr></table></figure></p>\n<p>   查询结果：锁定一条记录<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">+<span class=\"comment\">----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+</span></div><div class=\"line\"> </div><div class=\"line\">| id | select_type | table      | type  | possible_keys | key   | key_len | ref   | rows | Extra |</div><div class=\"line\"> </div><div class=\"line\">+<span class=\"comment\">----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+</span></div><div class=\"line\"> </div><div class=\"line\">|  1 | SIMPLE      | test_index | const | uk_id         | uk_id | 5       | const |    1 | NULL  |</div><div class=\"line\"> </div><div class=\"line\">+<span class=\"comment\">----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+</span></div><div class=\"line\"> </div><div class=\"line\">type: const ，key:uk_id,rows:</div></pre></td></tr></table></figure></p>\n<h4 id=\"两个事务，TX1加共享行锁-查询age-17的记录，-TX2往数据库里插入一条age-18的记录\"><a href=\"#两个事务，TX1加共享行锁-查询age-17的记录，-TX2往数据库里插入一条age-18的记录\" class=\"headerlink\" title=\"两个事务，TX1加共享行锁, 查询age=17的记录， TX2往数据库里插入一条age=18的记录\"></a>两个事务，TX1加共享行锁, 查询age=17的记录， TX2往数据库里插入一条age=18的记录</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">set autocommit=0;//MySQL默认操作模式就是autocommit自动提交模式。这就表示除非显式地开始一个事务，</div><div class=\"line\">否则每个查询都被当做一个单独的事务自动执行。我们可以通过设置autocommit的值改变是否是自动提交autocommit模式。</div><div class=\"line\">值0和OFF都是一样的，当然，1也就表示ON。通过以上设置autocommit=0，则用户将一直处于某个事务中，直到执行一条</div><div class=\"line\">commit提交或rollback语句才会结束当前事务重新开始一个新的事务。</div><div class=\"line\"></div><div class=\"line\">select * from test_index where age=17 lock in share mode;</div><div class=\"line\">+------+------+------+</div><div class=\"line\"> </div><div class=\"line\">| id   | name | age  |</div><div class=\"line\"> </div><div class=\"line\">+------+------+------+</div><div class=\"line\"> </div><div class=\"line\">|    4 | 张四 |   17 |</div><div class=\"line\"> </div><div class=\"line\">+------+------+------+</div><div class=\"line\"> </div><div class=\"line\">1 row in set (0.00 sec)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">TX2:</div><div class=\"line\">mysql&gt; set autocommit=0;</div><div class=\"line\"> </div><div class=\"line\">mysql&gt; insert test_index values(8,'test',18);</div><div class=\"line\"> </div><div class=\"line\">ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</div></pre></td></tr></table></figure>\n<p> 显然被锁住的不止age=17的那一行<br> 执行sql查看加锁的具体信息<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> information_schema.innodb_locks</div></pre></td></tr></table></figure></p>\n<h3 id=\"表锁\"><a href=\"#表锁\" class=\"headerlink\" title=\"表锁\"></a>表锁</h3><p> MySQL表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。什么意思呢，就是说对MyISAM表进行读操作时，它不会阻塞其他用户对同一表的读请求，但会阻塞 对同一表的写操作；而对MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作。<br> InnoDB锁与MyISAM锁的最大不同在于：一是支持事务（TRANCSACTION），二是采用了行级锁。我们知道事务是由一组SQL语句组成的逻辑处理单元，其有四个属性（简称ACID属性），分别为：<br> <em>原子性（Atomicity）</em>：事务是一个原子操作单元，其对数据的修改，要么全部执行，要么全都不执行；<br> <em>一致性（Consistent）</em>：在事务开始和完成时，数据都必须保持一致状态；<br> <em>隔离性（Isolation）</em>：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行；<br> <em>持久性（Durable）</em>：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。<br> InnoDB有两种模式的行锁：<br> <em>共享锁(S)</em>：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。<br> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">( <span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> ......lock <span class=\"keyword\">in</span> <span class=\"keyword\">share</span> <span class=\"keyword\">mode</span>)</div></pre></td></tr></table></figure></p>\n<p> <em>排他锁(X)</em>：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。<br> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name where.....for <span class=\"keyword\">update</span>)</div></pre></td></tr></table></figure></p>\n<p> 为了允许行锁和表锁共存，实现多粒度锁机制；同时还有两种内部使用的意向锁（都是表锁），分别为意向共享锁和意向排他锁。InnoDB行锁是通过给索引项加锁来实现的，即只有通过索引条件检索数据，InnoDB才使用行级锁，否则将使用表锁！<br><em>意向共享锁(IS)</em><br>事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。<br><em>意向排他锁(IX)</em><br>事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</p>\n<h3 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h3><p>正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据） </p>\n<h3 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h3><p>相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。<br>而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。<br> 本质上，数据库的乐观锁做法和悲观锁做法主要就是解决下面假设的场景，避免丢失更新问题：</p>\n<h2 id=\"并发事务处理带来的问题\"><a href=\"#并发事务处理带来的问题\" class=\"headerlink\" title=\"并发事务处理带来的问题\"></a>并发事务处理带来的问题</h2><p>相对于串行处理来说，并发事务处理能大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多的用户。但并发事务处理也会带来一些问题，主要包括以下几种情况。<br><em>更新丢失（Lost Update）</em>：当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题－－最后的更新覆盖了由其他事务所做的更新。例如，两个编辑人员制作了同一文档的电子副本。每个编辑人员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖另一个编辑人员所做的更改。如果在一个编辑人员完成并提交事务之前，另一个编辑人员不能访问同一文件，则可避免此问题。<br><em>脏读（Dirty Reads）</em>：一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做”脏读”。<br><em>不可重复读（Non-Repeatable Reads）</em>：一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。<br><em>幻读（Phantom Reads）</em>：一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。</p>\n<p><a href=\"http://blog.csdn.net/lishenglong666/article/details/53913126\" target=\"_blank\" rel=\"external\"><strong><em>MySQL锁机制详细参考链接</em></strong></a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"锁的基本概念\"><a href=\"#锁的基本概念\" class=\"headerlink\" title=\"锁的基本概念\"></a>锁的基本概念</h2><p>  锁，在现实生活中是为我们想要隐藏于外界所使用的一种工具。在计算机中，是协调多个进程或线程并发访问某一资源的一种机制。","more":"在数据库当中，除了传统的计算资源（CPU、RAM、I/O等等）的争用之外，数据也是一种供许多用户共享访问的资源。如何保证数据并发访问的一致性、有效性，是所有数据库必须解决的一个问题，锁的冲突也是影响数据库并发访问性能的一个重要因素。从这一角度来说，锁对于数据库而言就显得尤为重要。<br>  相对于其他的数据库而言，MySQL的锁机制比较简单，最显著的特点就是不同的存储引擎支持不同的锁机制。根据不同的存储引擎，MySQL中锁的特性可以大致归纳如下：</p>\n<table>\n<thead>\n<tr>\n<th>存储引擎</th>\n<th>行锁</th>\n<th>表锁</th>\n<th>页锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>  MyISAM</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>  BDB</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>  InnoDB</td>\n<td>支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"MySQL3种锁的特性：\"><a href=\"#MySQL3种锁的特性：\" class=\"headerlink\" title=\"MySQL3种锁的特性：\"></a>MySQL3种锁的特性：</h3><p>   <em>表级锁</em>：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。<br>   <em>行级锁</em>：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。<br>   <em>页面锁</em>：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>\n<p>   很难笼统的说哪种锁最好，只能根据具体应用的特点来说哪种锁更加合适。仅仅从锁的角度来说的话：表锁更适用于以查询为主，只有少量按索引条件更新数据的应用；行锁更适用于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用。</p>\n<h3 id=\"行锁（Row-Lock）\"><a href=\"#行锁（Row-Lock）\" class=\"headerlink\" title=\"行锁（Row Lock）\"></a>行锁（Row Lock）</h3><p>  对一行记录加锁，只影响一条记录。常用在DML语句中，如INSERT, UPDATE, DELETE等。InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test_index(<span class=\"keyword\">id</span> <span class=\"built_in\">int</span> , <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">50</span>),age <span class=\"built_in\">int</span> )<span class=\"keyword\">engine</span>=<span class=\"keyword\">innodb</span> ;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">'张一'</span>,<span class=\"number\">15</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">3</span>,<span class=\"string\">'张三'</span>,<span class=\"number\">16</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">4</span>,<span class=\"string\">'张四'</span>,<span class=\"number\">17</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">5</span>,<span class=\"string\">'张五'</span>,<span class=\"number\">19</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test_index <span class=\"keyword\">values</span>(<span class=\"number\">7</span>,<span class=\"string\">'刘琦'</span>,<span class=\"number\">19</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"直接解释查询：\"><a href=\"#直接解释查询：\" class=\"headerlink\" title=\"直接解释查询：\"></a>直接解释查询：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> test_index <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<p>  查询结果：type: all ，rows: 5 很明显是会使用全表锁<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+</div><div class=\"line\">     </div><div class=\"line\">    | id | select_type | table      | <span class=\"built_in\">type</span> | possible_keys | key  | key_len | ref  | rows | Extra       |</div><div class=\"line\">     </div><div class=\"line\">    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+</div><div class=\"line\">     </div><div class=\"line\">    |  1 | SIMPLE      | test_index | ALL  | NULL          | NULL | NULL    | NULL |    5 | Using <span class=\"built_in\">where</span> |</div><div class=\"line\">     </div><div class=\"line\">    +----+-------------+------------+------+---------------+------+---------+------+------+-------------+</div><div class=\"line\"></div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">####  增加索引，id加唯一索引，age加普通索引</span></div><div class=\"line\">``` sql</div><div class=\"line\">ALTER TABLE test_index</div><div class=\"line\"> </div><div class=\"line\">ADD UNIQUE uk_id(id),</div><div class=\"line\">ADD index idx_age(age);</div><div class=\"line\"> </div><div class=\"line\">mysql&gt; explain select * from test_index <span class=\"built_in\">where</span> id = 1;</div></pre></td></tr></table></figure></p>\n<p>   查询结果：锁定一条记录<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">+<span class=\"comment\">----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+</span></div><div class=\"line\"> </div><div class=\"line\">| id | select_type | table      | type  | possible_keys | key   | key_len | ref   | rows | Extra |</div><div class=\"line\"> </div><div class=\"line\">+<span class=\"comment\">----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+</span></div><div class=\"line\"> </div><div class=\"line\">|  1 | SIMPLE      | test_index | const | uk_id         | uk_id | 5       | const |    1 | NULL  |</div><div class=\"line\"> </div><div class=\"line\">+<span class=\"comment\">----+-------------+------------+-------+---------------+-------+---------+-------+------+-------+</span></div><div class=\"line\"> </div><div class=\"line\">type: const ，key:uk_id,rows:</div></pre></td></tr></table></figure></p>\n<h4 id=\"两个事务，TX1加共享行锁-查询age-17的记录，-TX2往数据库里插入一条age-18的记录\"><a href=\"#两个事务，TX1加共享行锁-查询age-17的记录，-TX2往数据库里插入一条age-18的记录\" class=\"headerlink\" title=\"两个事务，TX1加共享行锁, 查询age=17的记录， TX2往数据库里插入一条age=18的记录\"></a>两个事务，TX1加共享行锁, 查询age=17的记录， TX2往数据库里插入一条age=18的记录</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">set autocommit=0;//MySQL默认操作模式就是autocommit自动提交模式。这就表示除非显式地开始一个事务，</div><div class=\"line\">否则每个查询都被当做一个单独的事务自动执行。我们可以通过设置autocommit的值改变是否是自动提交autocommit模式。</div><div class=\"line\">值0和OFF都是一样的，当然，1也就表示ON。通过以上设置autocommit=0，则用户将一直处于某个事务中，直到执行一条</div><div class=\"line\">commit提交或rollback语句才会结束当前事务重新开始一个新的事务。</div><div class=\"line\"></div><div class=\"line\">select * from test_index where age=17 lock in share mode;</div><div class=\"line\">+------+------+------+</div><div class=\"line\"> </div><div class=\"line\">| id   | name | age  |</div><div class=\"line\"> </div><div class=\"line\">+------+------+------+</div><div class=\"line\"> </div><div class=\"line\">|    4 | 张四 |   17 |</div><div class=\"line\"> </div><div class=\"line\">+------+------+------+</div><div class=\"line\"> </div><div class=\"line\">1 row in set (0.00 sec)</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">TX2:</div><div class=\"line\">mysql&gt; set autocommit=0;</div><div class=\"line\"> </div><div class=\"line\">mysql&gt; insert test_index values(8,'test',18);</div><div class=\"line\"> </div><div class=\"line\">ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</div></pre></td></tr></table></figure>\n<p> 显然被锁住的不止age=17的那一行<br> 执行sql查看加锁的具体信息<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> information_schema.innodb_locks</div></pre></td></tr></table></figure></p>\n<h3 id=\"表锁\"><a href=\"#表锁\" class=\"headerlink\" title=\"表锁\"></a>表锁</h3><p> MySQL表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。什么意思呢，就是说对MyISAM表进行读操作时，它不会阻塞其他用户对同一表的读请求，但会阻塞 对同一表的写操作；而对MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作。<br> InnoDB锁与MyISAM锁的最大不同在于：一是支持事务（TRANCSACTION），二是采用了行级锁。我们知道事务是由一组SQL语句组成的逻辑处理单元，其有四个属性（简称ACID属性），分别为：<br> <em>原子性（Atomicity）</em>：事务是一个原子操作单元，其对数据的修改，要么全部执行，要么全都不执行；<br> <em>一致性（Consistent）</em>：在事务开始和完成时，数据都必须保持一致状态；<br> <em>隔离性（Isolation）</em>：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行；<br> <em>持久性（Durable）</em>：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。<br> InnoDB有两种模式的行锁：<br> <em>共享锁(S)</em>：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。<br> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">( <span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> ......lock <span class=\"keyword\">in</span> <span class=\"keyword\">share</span> <span class=\"keyword\">mode</span>)</div></pre></td></tr></table></figure></p>\n<p> <em>排他锁(X)</em>：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。<br> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name where.....for <span class=\"keyword\">update</span>)</div></pre></td></tr></table></figure></p>\n<p> 为了允许行锁和表锁共存，实现多粒度锁机制；同时还有两种内部使用的意向锁（都是表锁），分别为意向共享锁和意向排他锁。InnoDB行锁是通过给索引项加锁来实现的，即只有通过索引条件检索数据，InnoDB才使用行级锁，否则将使用表锁！<br><em>意向共享锁(IS)</em><br>事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。<br><em>意向排他锁(IX)</em><br>事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</p>\n<h3 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h3><p>正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据） </p>\n<h3 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h3><p>相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。<br>而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。<br> 本质上，数据库的乐观锁做法和悲观锁做法主要就是解决下面假设的场景，避免丢失更新问题：</p>\n<h2 id=\"并发事务处理带来的问题\"><a href=\"#并发事务处理带来的问题\" class=\"headerlink\" title=\"并发事务处理带来的问题\"></a>并发事务处理带来的问题</h2><p>相对于串行处理来说，并发事务处理能大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多的用户。但并发事务处理也会带来一些问题，主要包括以下几种情况。<br><em>更新丢失（Lost Update）</em>：当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题－－最后的更新覆盖了由其他事务所做的更新。例如，两个编辑人员制作了同一文档的电子副本。每个编辑人员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖另一个编辑人员所做的更改。如果在一个编辑人员完成并提交事务之前，另一个编辑人员不能访问同一文件，则可避免此问题。<br><em>脏读（Dirty Reads）</em>：一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做”脏读”。<br><em>不可重复读（Non-Repeatable Reads）</em>：一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。<br><em>幻读（Phantom Reads）</em>：一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。</p>\n<p><a href=\"http://blog.csdn.net/lishenglong666/article/details/53913126\" target=\"_blank\" rel=\"external\"><strong><em>MySQL锁机制详细参考链接</em></strong></a></p>"},{"title":"redis实战","date":"2017-02-13T07:07:26.000Z","_content":"\n### redis的持久化\nredis 是一个支持持久化的内存数据库，也就是说redis需要经常将内存中的数据同步到磁盘来保证持久化。<!-- more -->redis 支持两种持久化方式，一种是Snapshotting（快照）也是默认方式，另一种是Append-only file（缩写aof）的方式\n#### snapshotting 方式\n 快照是默认的持久化方式。这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。可以通过配置设置自动做快照持久化的方式。我们可以配置redis 在n 秒内如果超过m 个key 被修改就自动做快照，下面是默认的快照保存配置\n save 900 1 #900 秒内如果超过1 个key 被修改，则发起快照保存\n save 300 10 #300 秒内容如超过10 个key 被修改，则发起快照保存\n 1.redis 调用fork,现在有了子进程和父进程。\n 2.父进程继续处理client 请求，子进程负责将内存内容写入到临时文件。由于os 的实时复制机制（copy on write)父子进程会共享相同的物理页面，当父进程处理写请求时os 会为父进程要修改的页面创建副本，而不是写共享的页面。所以子进程地址空间内的数据是fork时刻整个数据库的一个快照。\n 3.当子进程将快照写入临时文件完毕后，用临时文件替换原来的快照文件，然后子进程退出。client 也可以使用save 或者bgsave 命令通知redis 做一次快照持久化。save 操作是在主线程中保存快照的，由于redis 是用一个主线程来处理所有client 的请求，这种方式会阻塞所有client 请求。所以不推荐使用。另一点需要注意的是，每次快照持久化都是将内存数据完整写入到磁盘一次，并不是增量的只同步变更数据。如果数据量大的话，而且写操作比较多，必然会引起大量的磁盘io 操作，可能会严重影响性能。\n\n#### aof 方式\n另外由于快照方式是在一定间隔时间做一次的，所以如果redis 意外down 掉的话，就会丢失最后一次快照后的所有修改。如果应用要求不能丢失任何修改的话，可以采用aof 持久化方式。下面介绍Append-only file:aof 比快照方式有更好的持久化性，是由于在使用aof 持久化方式时,redis 会将每一个收到的写命令都通过write 函数追加到文件中(默认是appendonly.aof)。当redis 重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。当然由于os 会在内核中缓存 write 做的修改，所以可能不是立即写到磁盘上。这样aof 方式的持久化也还是有可能会丢失部分修改。不过我们可以通过配置文件告诉redis 我们想要通过fsync 函数强制os 写入到磁盘的时机。有三种方式如下（默认是：每秒fsync 一次）\n\n appendonly yes //启用aof 持久化方\n appendfsync always //收到写命令就立即写入磁盘，最慢，但是保证完全的持久化\n appendfsync everysec //每秒钟写入磁盘一次，在性能和持久化方面做了很好的折中\n appendfsync no //完全依赖os，性能最好,持久化没保证\n\n##### aof方式产生的问题\n\naof 的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test命令100 次，文件中必须保存全部的100 条命令，其实有99 条都是多余的。因为要恢复数据库的状态其实文件中保存一条set test 100 就够了。为了压缩aof 的持久化文件。redis 提供了bgrewriteaof 命令。收到此命令redis 将使用与快照类似的方式将内存中的数据以命令的方式保存到临时文件中，最后替换原来的文件。具体过程如下\n\n1、redis 调用fork ，现在有父子两个进程\n2、子进程根据内存中的数据库快照，往临时文件中写入重建数据库状态的命令\n3、父进程继续处理client 请求，除了把写命令写入到原来的aof 文件中。同时把收到的写命\n令缓存起来。这样就能保证如果子进程重写失败的话并不会出问题。\n4、当子进程把快照内容写入已命令方式写到临时文件中后，子进程发信号通知父进程。然\n后父进程把缓存的写命令也写入到临时文件。\n5、现在父进程可以使用临时文件替换老的aof 文件，并重命名，后面收到的写命令也开始\n往新的aof 文件中追加。\n\n### 发布及订阅消息\n发布订阅(pub/sub)是一种消息通信模式，主要的目的是解耦消息发布者和消息订阅者之间的耦合，这点和设计模式中的观察者模式比较相似。pub/sub 不仅仅解决发布者和订阅者直接代码级别耦合也解决两者在物理部署上的耦合。redis 作为一个pub/sub 的server，在订阅者和发布者之间起到了消息路由的功能。订阅者可以通过subscribe 和psubscribe 命令向redisserver 订阅自己感兴趣的消息类型，redis 将消息类型称为通道(channel)。当发布者通过publish 命令向redis server 发送特定类型的消息时。订阅该消息类型的全部client 都会收到此消息。这里消息的传递是多对多的。一个client 可以订阅多个channel,也可以向多个channel发送消息。\n\n### Pipeline 批量发送请求\n利用pipeline 的方式从client 打包多条命令一起发出，不需要等待单条命令的响应返回，而redis 服务端会处理完多条命令后会将多条命令的处理结果打包到一起返回给客户端。","source":"_posts/笔记/redis实战/redis实战.md","raw":"---\ntitle: redis实战\ndate: 2017-02-13 15:07:26\ntags: redis\ncategories: 笔记\n---\n\n### redis的持久化\nredis 是一个支持持久化的内存数据库，也就是说redis需要经常将内存中的数据同步到磁盘来保证持久化。<!-- more -->redis 支持两种持久化方式，一种是Snapshotting（快照）也是默认方式，另一种是Append-only file（缩写aof）的方式\n#### snapshotting 方式\n 快照是默认的持久化方式。这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。可以通过配置设置自动做快照持久化的方式。我们可以配置redis 在n 秒内如果超过m 个key 被修改就自动做快照，下面是默认的快照保存配置\n save 900 1 #900 秒内如果超过1 个key 被修改，则发起快照保存\n save 300 10 #300 秒内容如超过10 个key 被修改，则发起快照保存\n 1.redis 调用fork,现在有了子进程和父进程。\n 2.父进程继续处理client 请求，子进程负责将内存内容写入到临时文件。由于os 的实时复制机制（copy on write)父子进程会共享相同的物理页面，当父进程处理写请求时os 会为父进程要修改的页面创建副本，而不是写共享的页面。所以子进程地址空间内的数据是fork时刻整个数据库的一个快照。\n 3.当子进程将快照写入临时文件完毕后，用临时文件替换原来的快照文件，然后子进程退出。client 也可以使用save 或者bgsave 命令通知redis 做一次快照持久化。save 操作是在主线程中保存快照的，由于redis 是用一个主线程来处理所有client 的请求，这种方式会阻塞所有client 请求。所以不推荐使用。另一点需要注意的是，每次快照持久化都是将内存数据完整写入到磁盘一次，并不是增量的只同步变更数据。如果数据量大的话，而且写操作比较多，必然会引起大量的磁盘io 操作，可能会严重影响性能。\n\n#### aof 方式\n另外由于快照方式是在一定间隔时间做一次的，所以如果redis 意外down 掉的话，就会丢失最后一次快照后的所有修改。如果应用要求不能丢失任何修改的话，可以采用aof 持久化方式。下面介绍Append-only file:aof 比快照方式有更好的持久化性，是由于在使用aof 持久化方式时,redis 会将每一个收到的写命令都通过write 函数追加到文件中(默认是appendonly.aof)。当redis 重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。当然由于os 会在内核中缓存 write 做的修改，所以可能不是立即写到磁盘上。这样aof 方式的持久化也还是有可能会丢失部分修改。不过我们可以通过配置文件告诉redis 我们想要通过fsync 函数强制os 写入到磁盘的时机。有三种方式如下（默认是：每秒fsync 一次）\n\n appendonly yes //启用aof 持久化方\n appendfsync always //收到写命令就立即写入磁盘，最慢，但是保证完全的持久化\n appendfsync everysec //每秒钟写入磁盘一次，在性能和持久化方面做了很好的折中\n appendfsync no //完全依赖os，性能最好,持久化没保证\n\n##### aof方式产生的问题\n\naof 的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test命令100 次，文件中必须保存全部的100 条命令，其实有99 条都是多余的。因为要恢复数据库的状态其实文件中保存一条set test 100 就够了。为了压缩aof 的持久化文件。redis 提供了bgrewriteaof 命令。收到此命令redis 将使用与快照类似的方式将内存中的数据以命令的方式保存到临时文件中，最后替换原来的文件。具体过程如下\n\n1、redis 调用fork ，现在有父子两个进程\n2、子进程根据内存中的数据库快照，往临时文件中写入重建数据库状态的命令\n3、父进程继续处理client 请求，除了把写命令写入到原来的aof 文件中。同时把收到的写命\n令缓存起来。这样就能保证如果子进程重写失败的话并不会出问题。\n4、当子进程把快照内容写入已命令方式写到临时文件中后，子进程发信号通知父进程。然\n后父进程把缓存的写命令也写入到临时文件。\n5、现在父进程可以使用临时文件替换老的aof 文件，并重命名，后面收到的写命令也开始\n往新的aof 文件中追加。\n\n### 发布及订阅消息\n发布订阅(pub/sub)是一种消息通信模式，主要的目的是解耦消息发布者和消息订阅者之间的耦合，这点和设计模式中的观察者模式比较相似。pub/sub 不仅仅解决发布者和订阅者直接代码级别耦合也解决两者在物理部署上的耦合。redis 作为一个pub/sub 的server，在订阅者和发布者之间起到了消息路由的功能。订阅者可以通过subscribe 和psubscribe 命令向redisserver 订阅自己感兴趣的消息类型，redis 将消息类型称为通道(channel)。当发布者通过publish 命令向redis server 发送特定类型的消息时。订阅该消息类型的全部client 都会收到此消息。这里消息的传递是多对多的。一个client 可以订阅多个channel,也可以向多个channel发送消息。\n\n### Pipeline 批量发送请求\n利用pipeline 的方式从client 打包多条命令一起发出，不需要等待单条命令的响应返回，而redis 服务端会处理完多条命令后会将多条命令的处理结果打包到一起返回给客户端。","slug":"笔记/redis实战/redis实战","published":1,"updated":"2017-06-16T07:27:29.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3zlkzyf000hkct7flaunhm4","content":"<h3 id=\"redis的持久化\"><a href=\"#redis的持久化\" class=\"headerlink\" title=\"redis的持久化\"></a>redis的持久化</h3><p>redis 是一个支持持久化的内存数据库，也就是说redis需要经常将内存中的数据同步到磁盘来保证持久化。<a id=\"more\"></a>redis 支持两种持久化方式，一种是Snapshotting（快照）也是默认方式，另一种是Append-only file（缩写aof）的方式</p>\n<h4 id=\"snapshotting-方式\"><a href=\"#snapshotting-方式\" class=\"headerlink\" title=\"snapshotting 方式\"></a>snapshotting 方式</h4><p> 快照是默认的持久化方式。这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。可以通过配置设置自动做快照持久化的方式。我们可以配置redis 在n 秒内如果超过m 个key 被修改就自动做快照，下面是默认的快照保存配置<br> save 900 1 #900 秒内如果超过1 个key 被修改，则发起快照保存<br> save 300 10 #300 秒内容如超过10 个key 被修改，则发起快照保存<br> 1.redis 调用fork,现在有了子进程和父进程。<br> 2.父进程继续处理client 请求，子进程负责将内存内容写入到临时文件。由于os 的实时复制机制（copy on write)父子进程会共享相同的物理页面，当父进程处理写请求时os 会为父进程要修改的页面创建副本，而不是写共享的页面。所以子进程地址空间内的数据是fork时刻整个数据库的一个快照。<br> 3.当子进程将快照写入临时文件完毕后，用临时文件替换原来的快照文件，然后子进程退出。client 也可以使用save 或者bgsave 命令通知redis 做一次快照持久化。save 操作是在主线程中保存快照的，由于redis 是用一个主线程来处理所有client 的请求，这种方式会阻塞所有client 请求。所以不推荐使用。另一点需要注意的是，每次快照持久化都是将内存数据完整写入到磁盘一次，并不是增量的只同步变更数据。如果数据量大的话，而且写操作比较多，必然会引起大量的磁盘io 操作，可能会严重影响性能。</p>\n<h4 id=\"aof-方式\"><a href=\"#aof-方式\" class=\"headerlink\" title=\"aof 方式\"></a>aof 方式</h4><p>另外由于快照方式是在一定间隔时间做一次的，所以如果redis 意外down 掉的话，就会丢失最后一次快照后的所有修改。如果应用要求不能丢失任何修改的话，可以采用aof 持久化方式。下面介绍Append-only file:aof 比快照方式有更好的持久化性，是由于在使用aof 持久化方式时,redis 会将每一个收到的写命令都通过write 函数追加到文件中(默认是appendonly.aof)。当redis 重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。当然由于os 会在内核中缓存 write 做的修改，所以可能不是立即写到磁盘上。这样aof 方式的持久化也还是有可能会丢失部分修改。不过我们可以通过配置文件告诉redis 我们想要通过fsync 函数强制os 写入到磁盘的时机。有三种方式如下（默认是：每秒fsync 一次）</p>\n<p> appendonly yes //启用aof 持久化方<br> appendfsync always //收到写命令就立即写入磁盘，最慢，但是保证完全的持久化<br> appendfsync everysec //每秒钟写入磁盘一次，在性能和持久化方面做了很好的折中<br> appendfsync no //完全依赖os，性能最好,持久化没保证</p>\n<h5 id=\"aof方式产生的问题\"><a href=\"#aof方式产生的问题\" class=\"headerlink\" title=\"aof方式产生的问题\"></a>aof方式产生的问题</h5><p>aof 的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test命令100 次，文件中必须保存全部的100 条命令，其实有99 条都是多余的。因为要恢复数据库的状态其实文件中保存一条set test 100 就够了。为了压缩aof 的持久化文件。redis 提供了bgrewriteaof 命令。收到此命令redis 将使用与快照类似的方式将内存中的数据以命令的方式保存到临时文件中，最后替换原来的文件。具体过程如下</p>\n<p>1、redis 调用fork ，现在有父子两个进程<br>2、子进程根据内存中的数据库快照，往临时文件中写入重建数据库状态的命令<br>3、父进程继续处理client 请求，除了把写命令写入到原来的aof 文件中。同时把收到的写命<br>令缓存起来。这样就能保证如果子进程重写失败的话并不会出问题。<br>4、当子进程把快照内容写入已命令方式写到临时文件中后，子进程发信号通知父进程。然<br>后父进程把缓存的写命令也写入到临时文件。<br>5、现在父进程可以使用临时文件替换老的aof 文件，并重命名，后面收到的写命令也开始<br>往新的aof 文件中追加。</p>\n<h3 id=\"发布及订阅消息\"><a href=\"#发布及订阅消息\" class=\"headerlink\" title=\"发布及订阅消息\"></a>发布及订阅消息</h3><p>发布订阅(pub/sub)是一种消息通信模式，主要的目的是解耦消息发布者和消息订阅者之间的耦合，这点和设计模式中的观察者模式比较相似。pub/sub 不仅仅解决发布者和订阅者直接代码级别耦合也解决两者在物理部署上的耦合。redis 作为一个pub/sub 的server，在订阅者和发布者之间起到了消息路由的功能。订阅者可以通过subscribe 和psubscribe 命令向redisserver 订阅自己感兴趣的消息类型，redis 将消息类型称为通道(channel)。当发布者通过publish 命令向redis server 发送特定类型的消息时。订阅该消息类型的全部client 都会收到此消息。这里消息的传递是多对多的。一个client 可以订阅多个channel,也可以向多个channel发送消息。</p>\n<h3 id=\"Pipeline-批量发送请求\"><a href=\"#Pipeline-批量发送请求\" class=\"headerlink\" title=\"Pipeline 批量发送请求\"></a>Pipeline 批量发送请求</h3><p>利用pipeline 的方式从client 打包多条命令一起发出，不需要等待单条命令的响应返回，而redis 服务端会处理完多条命令后会将多条命令的处理结果打包到一起返回给客户端。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"redis的持久化\"><a href=\"#redis的持久化\" class=\"headerlink\" title=\"redis的持久化\"></a>redis的持久化</h3><p>redis 是一个支持持久化的内存数据库，也就是说redis需要经常将内存中的数据同步到磁盘来保证持久化。","more":"redis 支持两种持久化方式，一种是Snapshotting（快照）也是默认方式，另一种是Append-only file（缩写aof）的方式</p>\n<h4 id=\"snapshotting-方式\"><a href=\"#snapshotting-方式\" class=\"headerlink\" title=\"snapshotting 方式\"></a>snapshotting 方式</h4><p> 快照是默认的持久化方式。这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。可以通过配置设置自动做快照持久化的方式。我们可以配置redis 在n 秒内如果超过m 个key 被修改就自动做快照，下面是默认的快照保存配置<br> save 900 1 #900 秒内如果超过1 个key 被修改，则发起快照保存<br> save 300 10 #300 秒内容如超过10 个key 被修改，则发起快照保存<br> 1.redis 调用fork,现在有了子进程和父进程。<br> 2.父进程继续处理client 请求，子进程负责将内存内容写入到临时文件。由于os 的实时复制机制（copy on write)父子进程会共享相同的物理页面，当父进程处理写请求时os 会为父进程要修改的页面创建副本，而不是写共享的页面。所以子进程地址空间内的数据是fork时刻整个数据库的一个快照。<br> 3.当子进程将快照写入临时文件完毕后，用临时文件替换原来的快照文件，然后子进程退出。client 也可以使用save 或者bgsave 命令通知redis 做一次快照持久化。save 操作是在主线程中保存快照的，由于redis 是用一个主线程来处理所有client 的请求，这种方式会阻塞所有client 请求。所以不推荐使用。另一点需要注意的是，每次快照持久化都是将内存数据完整写入到磁盘一次，并不是增量的只同步变更数据。如果数据量大的话，而且写操作比较多，必然会引起大量的磁盘io 操作，可能会严重影响性能。</p>\n<h4 id=\"aof-方式\"><a href=\"#aof-方式\" class=\"headerlink\" title=\"aof 方式\"></a>aof 方式</h4><p>另外由于快照方式是在一定间隔时间做一次的，所以如果redis 意外down 掉的话，就会丢失最后一次快照后的所有修改。如果应用要求不能丢失任何修改的话，可以采用aof 持久化方式。下面介绍Append-only file:aof 比快照方式有更好的持久化性，是由于在使用aof 持久化方式时,redis 会将每一个收到的写命令都通过write 函数追加到文件中(默认是appendonly.aof)。当redis 重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。当然由于os 会在内核中缓存 write 做的修改，所以可能不是立即写到磁盘上。这样aof 方式的持久化也还是有可能会丢失部分修改。不过我们可以通过配置文件告诉redis 我们想要通过fsync 函数强制os 写入到磁盘的时机。有三种方式如下（默认是：每秒fsync 一次）</p>\n<p> appendonly yes //启用aof 持久化方<br> appendfsync always //收到写命令就立即写入磁盘，最慢，但是保证完全的持久化<br> appendfsync everysec //每秒钟写入磁盘一次，在性能和持久化方面做了很好的折中<br> appendfsync no //完全依赖os，性能最好,持久化没保证</p>\n<h5 id=\"aof方式产生的问题\"><a href=\"#aof方式产生的问题\" class=\"headerlink\" title=\"aof方式产生的问题\"></a>aof方式产生的问题</h5><p>aof 的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test命令100 次，文件中必须保存全部的100 条命令，其实有99 条都是多余的。因为要恢复数据库的状态其实文件中保存一条set test 100 就够了。为了压缩aof 的持久化文件。redis 提供了bgrewriteaof 命令。收到此命令redis 将使用与快照类似的方式将内存中的数据以命令的方式保存到临时文件中，最后替换原来的文件。具体过程如下</p>\n<p>1、redis 调用fork ，现在有父子两个进程<br>2、子进程根据内存中的数据库快照，往临时文件中写入重建数据库状态的命令<br>3、父进程继续处理client 请求，除了把写命令写入到原来的aof 文件中。同时把收到的写命<br>令缓存起来。这样就能保证如果子进程重写失败的话并不会出问题。<br>4、当子进程把快照内容写入已命令方式写到临时文件中后，子进程发信号通知父进程。然<br>后父进程把缓存的写命令也写入到临时文件。<br>5、现在父进程可以使用临时文件替换老的aof 文件，并重命名，后面收到的写命令也开始<br>往新的aof 文件中追加。</p>\n<h3 id=\"发布及订阅消息\"><a href=\"#发布及订阅消息\" class=\"headerlink\" title=\"发布及订阅消息\"></a>发布及订阅消息</h3><p>发布订阅(pub/sub)是一种消息通信模式，主要的目的是解耦消息发布者和消息订阅者之间的耦合，这点和设计模式中的观察者模式比较相似。pub/sub 不仅仅解决发布者和订阅者直接代码级别耦合也解决两者在物理部署上的耦合。redis 作为一个pub/sub 的server，在订阅者和发布者之间起到了消息路由的功能。订阅者可以通过subscribe 和psubscribe 命令向redisserver 订阅自己感兴趣的消息类型，redis 将消息类型称为通道(channel)。当发布者通过publish 命令向redis server 发送特定类型的消息时。订阅该消息类型的全部client 都会收到此消息。这里消息的传递是多对多的。一个client 可以订阅多个channel,也可以向多个channel发送消息。</p>\n<h3 id=\"Pipeline-批量发送请求\"><a href=\"#Pipeline-批量发送请求\" class=\"headerlink\" title=\"Pipeline 批量发送请求\"></a>Pipeline 批量发送请求</h3><p>利用pipeline 的方式从client 打包多条命令一起发出，不需要等待单条命令的响应返回，而redis 服务端会处理完多条命令后会将多条命令的处理结果打包到一起返回给客户端。</p>"},{"title":"java多线程核心技术","date":"2017-02-06T08:10:05.000Z","_content":"## Java多线程技能\n### 停止线程\n虽然interrupt有停止、中止的意思，但是不能直接停止当前运行的线程，<!-- more -->需要通过调用interrupted或者isInterrupted的状态来判断\n*interrupted*:测试当前线程是否处于中断状态，具有清除状态标识将其置为false的功能\n*isInterrupted*:测试当前线程是否处于中断状态，不改变状态值\n``` sql\n  public class Interrupt extends Thread{\n      public void run(){\n          for (int i=0; i<500000; i++){\n              super.run();\n              if (this.isInterrupted()){\n                  System.out.println(\"线程已经停止！退出\");\n                  break;\n              }\n              System.out.println(\"i=:\" + (i+1));\n          }\n      }\n  }\n  \n  --测试\n  public class Interrupted_test {\n  \n      public static void main(String[] args) {\n  \n          try {\n              Interrupt interrupt = new Interrupt();\n              interrupt.setName(\"A\");\n              interrupt.start();\n              Thread.sleep(2000);\n              interrupt.interrupt();\n          } catch (InterruptedException e) {\n              e.printStackTrace();\n          }\n      }\n  }\n```\n\n#### 异常法\n 通过捕获异常interruptedException，停止线程\n``` sql\npublic class Interrupt extends Thread{\n    public void run(){\n        try {\n            for (int i=0; i<500000; i++){\n                super.run();\n                if (this.isInterrupted()){\n                    System.out.println(\"线程已经停止！退出\");\n                    throw new InterruptedException();\n                }\n                System.out.println(\"i=:\" + (i+1));\n            }\n        System.out.println(\"我还要继续执行呢，狠狠！\");\n        }catch (InterruptedException e) {\n            System.out.println(\"I am interruptedException , i am catched by run! wu wu ....\");\n            e.printStackTrace();\n        }\n\n    }\n}\n```\n\n#### 在线程沉睡中停止\n在线程sleep时调用interrupted\n``` sql\npublic class SleepInterrupt extends Thread{\n\n    public void run() {\n    try{\n        System.out.println(\"run begin--> oo oo\");\n        Thread.sleep(2000);\n        System.out.println(\"run end--> ......\");\n    } catch(InterruptedException e) {\n        System.out.println(\"I am dead in sleeping ......\");\n        e.printStackTrace();\n    }\n\n    }\n}\n```\n\n#### 暴力停止stop\n用stop的方法停止线程的方式不推荐使用，这是一种不安全的停止方式,暴力停止可能会导致一些清理操作无法执行。\n\n#### return停止\n线程run()方法中直接return便退出线程。\n\n### 暂停、恢复线程\n*suspend()*: 暂停线程\n*resume()*: 复线程\n这种方法极易造成公共同步对象的独占，阻止其他线程访问公共同步方法;同时该方法也容易造成数据不同步的问题。\n``` sql\npublic class PrintLock extends Thread {\n    private long i = 0;\n    public void run(){\n        while (true) {\n           // if (this.isInterrupted()) return;\n            i++;\n           //System.out.println(\"i=:\"+i);<!--试试-->\n        }\n    }\n}\n\n--测试\npublic class PrintLock_test {\n    public static void main(String[] args) {\n        try {\n            PrintLock printLock = new PrintLock();\n            printLock.setName(\"binary\");\n            printLock.start();\n            Thread.sleep(1000);\n            printLock.suspend();\n            System.out.println(\"main end!\");\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n当线程获取print()的同步锁未释放时，主线程无法使用println(), println()源码如下：\n``` sql\n public void println(String x) {\n        synchronized (this) {\n            print(x);\n            newLine();\n        }\n    }\n```\n### yield\n 线程调用yield()让出cpu，之后再获取cpu继续执行，期间间隔的时间不确定。\n\n### 线程的优先级\n线程优先级有10个等级，1-10，设置优先级setPriority()。优先级较高的线程得到的cpu资源较多，也就是说cpu优先执行优先级较高的线程中对象中的任务。\n#### 优先级的继承性\n线程的优先级与启动的线程的优先级一样。\n#### 优先级具有规则性\n#### 优先级具有随机性\n### 守护线程\nJava线程中有两种线程，一种用户线程，另一种为守护线程。守护线程为非守护线程服务，当进程中没有非守护线程的时候，守护线程就会自动销毁，典型的如垃圾回收线程GC。只要当前的JVM虚拟机中存在任何一个非守护线程实例，守护线程就会一直工作。setDaemon()将线程设置为守护线程。\n\n## 对象及变量的并发访问\n### synchronized 方法\n非线程安全就是在多个线程对同一个对象的一个实例变量进行并发访问时出现“脏读”的现象，读到的数据是被修改过的，线程安全就是获取的实例变量的值是同步处理的，避免脏读现象。\n#### 实例变量的线程安全\n\n方法内的变量是线程安全的，然而多个线程并发访问同一个对象的实例变量就是非线程安全的，此时会出现脏读。\n``` sql\n public class synch {\n     //private int num = 0;  非线程安全\n      public void addI(String name) {\n       int num = 0;\n         if(name.eq(\"a\")){\n              num = 100;\n              try\n             { Thread.sleep(1000);}\n             catch(InterruptedException e){\n                     e.printStackTrace();\n             }\n         else{\n             num = 200;\n             }\n         }\n      }\n }\n \n```\n\n这种情况就是在addI()方法加上synchronized锁。\n\n#### 多个对象多个锁\nsynchronized只能锁住同一个对象实例的一个方法，同一对象的多个实例不受约束，通过synchronized锁住的方法只能顺序访问。\n\n#### 脏读\n``` sql\npublic class MyObject {\n\n    private String name = \"A\";\n    private String pwd = \"AA\";\n\n    synchronized public void setValue(String _name, String _pwd){\n        this.name = _name;\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        this.pwd = _pwd;\n\n    }\n\n   /*synchronized*/ public void getValue(){\n        System.out.println(Thread.currentThread().getName()+\"name:\"+this.name+\"&\"+\"pwd:\"+this.pwd);\n    }\n}\n\n\n/**\n * Created by song.yang on 2017/3/2：17:00.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class MyThread extends Thread {\n    private MyObject mo;\n    public MyThread(MyObject _mo) {\n        this.mo = _mo;\n    }\n\n    public void run(){\n        mo.setValue(\"B\", \"BB\");\n    }\n\n}\n\n\npublic class MyTest {\n    public static void main(String[] args) {\n        MyObject mo = new MyObject();\n        MyThread mt = new MyThread(mo);\n        mt.start();\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        mo.getValue();\n    }\n\n\n}\n```\n线程调用对象的同步方法获得对象锁，其他线程不能获取对象的锁，即其他线程不能调用该对象的所有同步方法，但是其他线程可以调用该对象的非同步方法。\n\n#### synchronized 锁重入\n\n一个线程获取对象锁之后，是可以连续请求以连续获得该对象的锁，即在一个synchronized修饰的方法块内再次调用该对象的其他同步方法是可以的。\n\n#### synchronized 锁释放\n出现异常，直接自动释放锁\n\n#### 同步不具有继承性\nsynchronized方法不能继承，在子类方法中添加synchronized修饰才能实现同步。\n### synchronized同步语句块\n使用synchronized容易出现长时间等待的现象\n#### 锁非this对象\n非this锁不会与this锁争抢对象锁，这样可以大大提高执行效率，不会发生长时间等待。\n``` sql\n/**\n * Created by song.yang on 2017/3/7：14:02.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class MyService {\n    public MyList addMyService(MyList ml,String str){\n        try {\n            synchronized(ml){\n            if (ml.getSize()<1){\n                Thread.sleep(2000);\n                ml.addList(str);\n            }\n            }\n        }catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return ml;\n    }\n}\n```\n\n####静态同步synchronized方法与synchronized（class）代码块\nsynchronized加到静态方法上，锁住的是class;synchronized加到非静态方法上，锁住的是对象。而锁住的是class锁可以对类的所有实例对象起作用\n#### 数据类型String的常量池特性\nJVM中具有String常量池缓存的功能，对象不具有\n``` sql\n/**\n * Created by song.yang on 2017/3/9：13:47.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class Service {\n    public  void print(String object){\n        synchronized(object){\n            while (true){\n                System.out.println(Thread.currentThread().getName());\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```\n### Volatile\n volatile是强制从公共堆栈中获取变量值，而不是从线程私有数据栈中获取变量值\n#### volatile与synchronized的比较\n关键字volatile是线程同步的轻量级实现，性能比synchronized好，volatile只能修数变量，而synchronized可以修饰方法和代码块，随着JDK版本的提升，synchronized的性能得到提升；多线程访问volatile不会发生阻塞，而多线程访问synchronized会发生阻塞；volatile可以保证数据的可见性，但不能保证数据的原子性，synchronized可以保证数据的原子性，也可以间接保证数据的可见性，因为它将会同步私有内存数据域和公共内存数据域的变量值；volatile可以保证多个线程访问变量的可见性，synchronized保证多个线程访问资源的同步性。volatile只能保证线程从内存中加载数据时是最新的，也就是读数据的时候是最新的，多个线程访问同一个实例变量还是要加锁保证同步。\n\n## 线程间通信\n### 共享实例变量实现通信\n### 通知/等待机制\nwait/notify通知等待机制，二者都要在同步方法中，都需要获得对象锁。\n*wait():* 使调用wait的线程释放共享资源的锁，进入等待队列，直到再次被唤醒\n*notify():* 随机唤醒等待队列中等待同一个资源的线程，被选中的线程退出等待队列，进入可执行状态\n*notifyall():* 唤醒等待队列中所有等待同一资源的线程，全部进入可运行状态，此时优先级最高的线程最先运行，也可能随机执行，具体取决于JVM的实现机制\nwait()执行之后会自动释放锁，notify()不会自动释放锁，只有在其所在的同步块执行完之后才释放锁\n#### wait(long)\n 在等待一段时间之内没被唤醒则自动唤醒\n \n### join()\njoin()是让所属的线程t正常执行，其他线程进入阻塞队列，在t执行完成之后，阻塞队列中的线程才能继续执行。\n*join(long):* 设置等待时间，底层实现是wait(long), 能够自动释放当前锁，之后其他线程可以获取该对象的同步方法\n*sleep(long):* 与join(long)不同的是sleep(long)不能自动释放锁\n\n### ThreadLocal\nThreadLocal为线程绑定私有变量\n\n## Lock的使用\n### 使用ReentrantLock类\nReentrantLock与synchronized作用类似，有lock()和nulock();\n\n## Timer\n## 单例模式与多线程\n### 立即加载/饿汉模式\n立即加载就是在使用类的时候已经创建完毕，常见的方法就是new实例化，而立即加载有着急、急迫的意思，所以称为饿汉模式\n### 延迟加载/懒汉模式\n延迟加载就是调用get()方法时候才创建实例，常见的情况就是直接在get()方法中实例化，而延迟加载就是在从中文的语境的来看有缓慢和不急迫的意思，故称为懒汉模式。\n延迟加载根本不能实现安全单例，只能在get()方法加同步synchronized锁才可以,但是该方法效率不高，也可以改成synchronized代码块的方法，但是同样效率低\n#### 使用DCL双检查锁机制\n``` sql\n/**\n * Created by song.yang on 2017/3/11：14:52.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class MyObject {\n\n    private volatile static MyObject myObject;\n    private MyObject(){\n\n    }\n\n    public static MyObject getInstance(){\n        if (myObject != null){\n\n        }else {\n            try {\n                Thread.sleep(1000);\n                synchronized (MyObject.class){\n                    if (myObject == null){\n                        myObject = new MyObject();\n                    }\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        return myObject;\n    }\n}\n```\n#### 使用静态内置类实现锁机制\n``` sql\n/**\n * Created by song.yang on 2017/3/11：15:17.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class StaticClass {\n    private static final Logger logger = LoggerFactory.getLogger(StaticClass.class);\n    private static class StaticHandler{\n        private static StaticClass staticClass = new StaticClass();\n    }\n\n    private StaticClass(){\n    }\n\n    public static StaticClass getInstance(){\n        logger.info(\"静态内置类实现单例模式。。。。\");\n        return  StaticHandler.staticClass;\n    }\n}\n```\n\n### 序列化和反序列化的单例模式实现\n静态内置类能够达到单例模式的效果，但是在实现序列化的时候，如果按照默认的的方式则结果还是多例的\n``` sql\n/**\n * Created by song.yang on 2017/3/11：15:44.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class MyObject implements Serializable{\n    private static final Logger logger = LoggerFactory.getLogger(MyObject.class);\n    private final static long serialVersionUID = -1L;\n    private static class ObjectClass{\n        private static final MyObject myObject = new MyObject();\n    }\n    private MyObject(){\n\n    }\n\n    public static MyObject getInstance(){\n        return ObjectClass.myObject;\n    }\n/**\n 那么这个readResolve()方法是从哪来的，为什么加上之后就能返回同一实例了呢？\n 找到ObjectInputStream类的\n * Reads and returns \"ordinary\" (i.e., not a String, Class,\n * ObjectStreamClass, array, or enum constant) object, or null if object's\n * class is unresolvable (in which case a ClassNotFoundException will be\n * associated with object's handle).  Sets passHandle to object's assigned\n * handle.\n\nprivate Object readOrdinaryObject(boolean unshared)\n        throws IOException\n{\n    if (bin.readByte() != TC_OBJECT) {\n        throw new InternalError();\n    }\n\n    ObjectStreamClass desc = readClassDesc(false);\n    desc.checkDeserialize();\n\n    Class<?> cl = desc.forClass();\n    if (cl == String.class || cl == Class.class\n            || cl == ObjectStreamClass.class) {\n        throw new InvalidClassException(\"invalid class descriptor\");\n    }\n\n    Object obj;\n    try {\n        obj = desc.isInstantiable() ? desc.newInstance() : null;\n    } catch (Exception ex) {\n        throw (IOException) new InvalidClassException(\n                desc.forClass().getName(),\n                \"unable to create instance\").initCause(ex);\n    }\n\n    passHandle = handles.assign(unshared ? unsharedMarker : obj);\n    ClassNotFoundException resolveEx = desc.getResolveException();\n    if (resolveEx != null) {\n        handles.markException(passHandle, resolveEx);\n    }\n\n    if (desc.isExternalizable()) {\n        readExternalData((Externalizable) obj, desc);\n    } else {\n        readSerialData(obj, desc);\n    }\n\n    handles.finish(passHandle);\n\n    if (obj != null &&\n            handles.lookupException(passHandle) == null &&\n            desc.hasReadResolveMethod())\n    {\n        Object rep = desc.invokeReadResolve(obj);\n        if (unshared && rep.getClass().isArray()) {\n            rep = cloneArray(rep);\n        }\n        if (rep != obj) {\n            handles.setObject(passHandle, obj = rep);\n        }\n    }\n\n    return obj;\n}\n */\n     protected Object readResolve(){\n        System.out.println(\"调用了readResolve方法！\");\n        return  ObjectClass.myObject;\n    }\n}\n```\n\n### 使用static代码块实现单例模式\nstatic代码块中的代码代码在使用类的时候已经执行了\n``` sql\n/**\n * Created by song.yang on 2017/3/11：16:50.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class StaticSingleton {\n    private static StaticSingleton instance = null;\n    private StaticSingleton(){\n\n    }\n    static {\n        instance = new StaticSingleton();\n    }\n    public static StaticSingleton getInstance(){\n        return instance;\n    }\n}\n```\n### 使用enum枚举数据类型实现单例模式\n在使用枚举数据类型时，*构造方法*会被自动调用，可以根据这个特性实现单例模式\n\n## 拾遗增补\n### 线程状态\n调用线程的getState(), 线程状态new,runnable,running,terminated,timed_waiting,blocked,waiting,\n\n### 线程组\n### 线程对象关联线程组：1级关联\n父对象与子对象\n### 线程 对象关联线程组：多级关联\n父对象与子对象以及孙子对象\n\n### 线程具有有序性\n\n### SimpleDateFormate非线程安全\nSimpleDateFormate类是非线程安全的，\n","source":"_posts/笔记/java多线程/java多线程.md","raw":"---\ntitle: java多线程核心技术\ndate: 2017-02-06 16:10:05\ntags: [java,thread]\ncategories: 笔记\n---\n## Java多线程技能\n### 停止线程\n虽然interrupt有停止、中止的意思，但是不能直接停止当前运行的线程，<!-- more -->需要通过调用interrupted或者isInterrupted的状态来判断\n*interrupted*:测试当前线程是否处于中断状态，具有清除状态标识将其置为false的功能\n*isInterrupted*:测试当前线程是否处于中断状态，不改变状态值\n``` sql\n  public class Interrupt extends Thread{\n      public void run(){\n          for (int i=0; i<500000; i++){\n              super.run();\n              if (this.isInterrupted()){\n                  System.out.println(\"线程已经停止！退出\");\n                  break;\n              }\n              System.out.println(\"i=:\" + (i+1));\n          }\n      }\n  }\n  \n  --测试\n  public class Interrupted_test {\n  \n      public static void main(String[] args) {\n  \n          try {\n              Interrupt interrupt = new Interrupt();\n              interrupt.setName(\"A\");\n              interrupt.start();\n              Thread.sleep(2000);\n              interrupt.interrupt();\n          } catch (InterruptedException e) {\n              e.printStackTrace();\n          }\n      }\n  }\n```\n\n#### 异常法\n 通过捕获异常interruptedException，停止线程\n``` sql\npublic class Interrupt extends Thread{\n    public void run(){\n        try {\n            for (int i=0; i<500000; i++){\n                super.run();\n                if (this.isInterrupted()){\n                    System.out.println(\"线程已经停止！退出\");\n                    throw new InterruptedException();\n                }\n                System.out.println(\"i=:\" + (i+1));\n            }\n        System.out.println(\"我还要继续执行呢，狠狠！\");\n        }catch (InterruptedException e) {\n            System.out.println(\"I am interruptedException , i am catched by run! wu wu ....\");\n            e.printStackTrace();\n        }\n\n    }\n}\n```\n\n#### 在线程沉睡中停止\n在线程sleep时调用interrupted\n``` sql\npublic class SleepInterrupt extends Thread{\n\n    public void run() {\n    try{\n        System.out.println(\"run begin--> oo oo\");\n        Thread.sleep(2000);\n        System.out.println(\"run end--> ......\");\n    } catch(InterruptedException e) {\n        System.out.println(\"I am dead in sleeping ......\");\n        e.printStackTrace();\n    }\n\n    }\n}\n```\n\n#### 暴力停止stop\n用stop的方法停止线程的方式不推荐使用，这是一种不安全的停止方式,暴力停止可能会导致一些清理操作无法执行。\n\n#### return停止\n线程run()方法中直接return便退出线程。\n\n### 暂停、恢复线程\n*suspend()*: 暂停线程\n*resume()*: 复线程\n这种方法极易造成公共同步对象的独占，阻止其他线程访问公共同步方法;同时该方法也容易造成数据不同步的问题。\n``` sql\npublic class PrintLock extends Thread {\n    private long i = 0;\n    public void run(){\n        while (true) {\n           // if (this.isInterrupted()) return;\n            i++;\n           //System.out.println(\"i=:\"+i);<!--试试-->\n        }\n    }\n}\n\n--测试\npublic class PrintLock_test {\n    public static void main(String[] args) {\n        try {\n            PrintLock printLock = new PrintLock();\n            printLock.setName(\"binary\");\n            printLock.start();\n            Thread.sleep(1000);\n            printLock.suspend();\n            System.out.println(\"main end!\");\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n当线程获取print()的同步锁未释放时，主线程无法使用println(), println()源码如下：\n``` sql\n public void println(String x) {\n        synchronized (this) {\n            print(x);\n            newLine();\n        }\n    }\n```\n### yield\n 线程调用yield()让出cpu，之后再获取cpu继续执行，期间间隔的时间不确定。\n\n### 线程的优先级\n线程优先级有10个等级，1-10，设置优先级setPriority()。优先级较高的线程得到的cpu资源较多，也就是说cpu优先执行优先级较高的线程中对象中的任务。\n#### 优先级的继承性\n线程的优先级与启动的线程的优先级一样。\n#### 优先级具有规则性\n#### 优先级具有随机性\n### 守护线程\nJava线程中有两种线程，一种用户线程，另一种为守护线程。守护线程为非守护线程服务，当进程中没有非守护线程的时候，守护线程就会自动销毁，典型的如垃圾回收线程GC。只要当前的JVM虚拟机中存在任何一个非守护线程实例，守护线程就会一直工作。setDaemon()将线程设置为守护线程。\n\n## 对象及变量的并发访问\n### synchronized 方法\n非线程安全就是在多个线程对同一个对象的一个实例变量进行并发访问时出现“脏读”的现象，读到的数据是被修改过的，线程安全就是获取的实例变量的值是同步处理的，避免脏读现象。\n#### 实例变量的线程安全\n\n方法内的变量是线程安全的，然而多个线程并发访问同一个对象的实例变量就是非线程安全的，此时会出现脏读。\n``` sql\n public class synch {\n     //private int num = 0;  非线程安全\n      public void addI(String name) {\n       int num = 0;\n         if(name.eq(\"a\")){\n              num = 100;\n              try\n             { Thread.sleep(1000);}\n             catch(InterruptedException e){\n                     e.printStackTrace();\n             }\n         else{\n             num = 200;\n             }\n         }\n      }\n }\n \n```\n\n这种情况就是在addI()方法加上synchronized锁。\n\n#### 多个对象多个锁\nsynchronized只能锁住同一个对象实例的一个方法，同一对象的多个实例不受约束，通过synchronized锁住的方法只能顺序访问。\n\n#### 脏读\n``` sql\npublic class MyObject {\n\n    private String name = \"A\";\n    private String pwd = \"AA\";\n\n    synchronized public void setValue(String _name, String _pwd){\n        this.name = _name;\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        this.pwd = _pwd;\n\n    }\n\n   /*synchronized*/ public void getValue(){\n        System.out.println(Thread.currentThread().getName()+\"name:\"+this.name+\"&\"+\"pwd:\"+this.pwd);\n    }\n}\n\n\n/**\n * Created by song.yang on 2017/3/2：17:00.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class MyThread extends Thread {\n    private MyObject mo;\n    public MyThread(MyObject _mo) {\n        this.mo = _mo;\n    }\n\n    public void run(){\n        mo.setValue(\"B\", \"BB\");\n    }\n\n}\n\n\npublic class MyTest {\n    public static void main(String[] args) {\n        MyObject mo = new MyObject();\n        MyThread mt = new MyThread(mo);\n        mt.start();\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        mo.getValue();\n    }\n\n\n}\n```\n线程调用对象的同步方法获得对象锁，其他线程不能获取对象的锁，即其他线程不能调用该对象的所有同步方法，但是其他线程可以调用该对象的非同步方法。\n\n#### synchronized 锁重入\n\n一个线程获取对象锁之后，是可以连续请求以连续获得该对象的锁，即在一个synchronized修饰的方法块内再次调用该对象的其他同步方法是可以的。\n\n#### synchronized 锁释放\n出现异常，直接自动释放锁\n\n#### 同步不具有继承性\nsynchronized方法不能继承，在子类方法中添加synchronized修饰才能实现同步。\n### synchronized同步语句块\n使用synchronized容易出现长时间等待的现象\n#### 锁非this对象\n非this锁不会与this锁争抢对象锁，这样可以大大提高执行效率，不会发生长时间等待。\n``` sql\n/**\n * Created by song.yang on 2017/3/7：14:02.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class MyService {\n    public MyList addMyService(MyList ml,String str){\n        try {\n            synchronized(ml){\n            if (ml.getSize()<1){\n                Thread.sleep(2000);\n                ml.addList(str);\n            }\n            }\n        }catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return ml;\n    }\n}\n```\n\n####静态同步synchronized方法与synchronized（class）代码块\nsynchronized加到静态方法上，锁住的是class;synchronized加到非静态方法上，锁住的是对象。而锁住的是class锁可以对类的所有实例对象起作用\n#### 数据类型String的常量池特性\nJVM中具有String常量池缓存的功能，对象不具有\n``` sql\n/**\n * Created by song.yang on 2017/3/9：13:47.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class Service {\n    public  void print(String object){\n        synchronized(object){\n            while (true){\n                System.out.println(Thread.currentThread().getName());\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```\n### Volatile\n volatile是强制从公共堆栈中获取变量值，而不是从线程私有数据栈中获取变量值\n#### volatile与synchronized的比较\n关键字volatile是线程同步的轻量级实现，性能比synchronized好，volatile只能修数变量，而synchronized可以修饰方法和代码块，随着JDK版本的提升，synchronized的性能得到提升；多线程访问volatile不会发生阻塞，而多线程访问synchronized会发生阻塞；volatile可以保证数据的可见性，但不能保证数据的原子性，synchronized可以保证数据的原子性，也可以间接保证数据的可见性，因为它将会同步私有内存数据域和公共内存数据域的变量值；volatile可以保证多个线程访问变量的可见性，synchronized保证多个线程访问资源的同步性。volatile只能保证线程从内存中加载数据时是最新的，也就是读数据的时候是最新的，多个线程访问同一个实例变量还是要加锁保证同步。\n\n## 线程间通信\n### 共享实例变量实现通信\n### 通知/等待机制\nwait/notify通知等待机制，二者都要在同步方法中，都需要获得对象锁。\n*wait():* 使调用wait的线程释放共享资源的锁，进入等待队列，直到再次被唤醒\n*notify():* 随机唤醒等待队列中等待同一个资源的线程，被选中的线程退出等待队列，进入可执行状态\n*notifyall():* 唤醒等待队列中所有等待同一资源的线程，全部进入可运行状态，此时优先级最高的线程最先运行，也可能随机执行，具体取决于JVM的实现机制\nwait()执行之后会自动释放锁，notify()不会自动释放锁，只有在其所在的同步块执行完之后才释放锁\n#### wait(long)\n 在等待一段时间之内没被唤醒则自动唤醒\n \n### join()\njoin()是让所属的线程t正常执行，其他线程进入阻塞队列，在t执行完成之后，阻塞队列中的线程才能继续执行。\n*join(long):* 设置等待时间，底层实现是wait(long), 能够自动释放当前锁，之后其他线程可以获取该对象的同步方法\n*sleep(long):* 与join(long)不同的是sleep(long)不能自动释放锁\n\n### ThreadLocal\nThreadLocal为线程绑定私有变量\n\n## Lock的使用\n### 使用ReentrantLock类\nReentrantLock与synchronized作用类似，有lock()和nulock();\n\n## Timer\n## 单例模式与多线程\n### 立即加载/饿汉模式\n立即加载就是在使用类的时候已经创建完毕，常见的方法就是new实例化，而立即加载有着急、急迫的意思，所以称为饿汉模式\n### 延迟加载/懒汉模式\n延迟加载就是调用get()方法时候才创建实例，常见的情况就是直接在get()方法中实例化，而延迟加载就是在从中文的语境的来看有缓慢和不急迫的意思，故称为懒汉模式。\n延迟加载根本不能实现安全单例，只能在get()方法加同步synchronized锁才可以,但是该方法效率不高，也可以改成synchronized代码块的方法，但是同样效率低\n#### 使用DCL双检查锁机制\n``` sql\n/**\n * Created by song.yang on 2017/3/11：14:52.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class MyObject {\n\n    private volatile static MyObject myObject;\n    private MyObject(){\n\n    }\n\n    public static MyObject getInstance(){\n        if (myObject != null){\n\n        }else {\n            try {\n                Thread.sleep(1000);\n                synchronized (MyObject.class){\n                    if (myObject == null){\n                        myObject = new MyObject();\n                    }\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        return myObject;\n    }\n}\n```\n#### 使用静态内置类实现锁机制\n``` sql\n/**\n * Created by song.yang on 2017/3/11：15:17.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class StaticClass {\n    private static final Logger logger = LoggerFactory.getLogger(StaticClass.class);\n    private static class StaticHandler{\n        private static StaticClass staticClass = new StaticClass();\n    }\n\n    private StaticClass(){\n    }\n\n    public static StaticClass getInstance(){\n        logger.info(\"静态内置类实现单例模式。。。。\");\n        return  StaticHandler.staticClass;\n    }\n}\n```\n\n### 序列化和反序列化的单例模式实现\n静态内置类能够达到单例模式的效果，但是在实现序列化的时候，如果按照默认的的方式则结果还是多例的\n``` sql\n/**\n * Created by song.yang on 2017/3/11：15:44.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class MyObject implements Serializable{\n    private static final Logger logger = LoggerFactory.getLogger(MyObject.class);\n    private final static long serialVersionUID = -1L;\n    private static class ObjectClass{\n        private static final MyObject myObject = new MyObject();\n    }\n    private MyObject(){\n\n    }\n\n    public static MyObject getInstance(){\n        return ObjectClass.myObject;\n    }\n/**\n 那么这个readResolve()方法是从哪来的，为什么加上之后就能返回同一实例了呢？\n 找到ObjectInputStream类的\n * Reads and returns \"ordinary\" (i.e., not a String, Class,\n * ObjectStreamClass, array, or enum constant) object, or null if object's\n * class is unresolvable (in which case a ClassNotFoundException will be\n * associated with object's handle).  Sets passHandle to object's assigned\n * handle.\n\nprivate Object readOrdinaryObject(boolean unshared)\n        throws IOException\n{\n    if (bin.readByte() != TC_OBJECT) {\n        throw new InternalError();\n    }\n\n    ObjectStreamClass desc = readClassDesc(false);\n    desc.checkDeserialize();\n\n    Class<?> cl = desc.forClass();\n    if (cl == String.class || cl == Class.class\n            || cl == ObjectStreamClass.class) {\n        throw new InvalidClassException(\"invalid class descriptor\");\n    }\n\n    Object obj;\n    try {\n        obj = desc.isInstantiable() ? desc.newInstance() : null;\n    } catch (Exception ex) {\n        throw (IOException) new InvalidClassException(\n                desc.forClass().getName(),\n                \"unable to create instance\").initCause(ex);\n    }\n\n    passHandle = handles.assign(unshared ? unsharedMarker : obj);\n    ClassNotFoundException resolveEx = desc.getResolveException();\n    if (resolveEx != null) {\n        handles.markException(passHandle, resolveEx);\n    }\n\n    if (desc.isExternalizable()) {\n        readExternalData((Externalizable) obj, desc);\n    } else {\n        readSerialData(obj, desc);\n    }\n\n    handles.finish(passHandle);\n\n    if (obj != null &&\n            handles.lookupException(passHandle) == null &&\n            desc.hasReadResolveMethod())\n    {\n        Object rep = desc.invokeReadResolve(obj);\n        if (unshared && rep.getClass().isArray()) {\n            rep = cloneArray(rep);\n        }\n        if (rep != obj) {\n            handles.setObject(passHandle, obj = rep);\n        }\n    }\n\n    return obj;\n}\n */\n     protected Object readResolve(){\n        System.out.println(\"调用了readResolve方法！\");\n        return  ObjectClass.myObject;\n    }\n}\n```\n\n### 使用static代码块实现单例模式\nstatic代码块中的代码代码在使用类的时候已经执行了\n``` sql\n/**\n * Created by song.yang on 2017/3/11：16:50.\n * <p>\n * e-mail:song.yang@msxf.com\n */\n\npublic class StaticSingleton {\n    private static StaticSingleton instance = null;\n    private StaticSingleton(){\n\n    }\n    static {\n        instance = new StaticSingleton();\n    }\n    public static StaticSingleton getInstance(){\n        return instance;\n    }\n}\n```\n### 使用enum枚举数据类型实现单例模式\n在使用枚举数据类型时，*构造方法*会被自动调用，可以根据这个特性实现单例模式\n\n## 拾遗增补\n### 线程状态\n调用线程的getState(), 线程状态new,runnable,running,terminated,timed_waiting,blocked,waiting,\n\n### 线程组\n### 线程对象关联线程组：1级关联\n父对象与子对象\n### 线程 对象关联线程组：多级关联\n父对象与子对象以及孙子对象\n\n### 线程具有有序性\n\n### SimpleDateFormate非线程安全\nSimpleDateFormate类是非线程安全的，\n","slug":"笔记/java多线程/java多线程","published":1,"updated":"2017-06-16T07:27:29.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3zlkzyo000kkct7ek4jfkwj","content":"<h2 id=\"Java多线程技能\"><a href=\"#Java多线程技能\" class=\"headerlink\" title=\"Java多线程技能\"></a>Java多线程技能</h2><h3 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h3><p>虽然interrupt有停止、中止的意思，但是不能直接停止当前运行的线程，<a id=\"more\"></a>需要通过调用interrupted或者isInterrupted的状态来判断<br><em>interrupted</em>:测试当前线程是否处于中断状态，具有清除状态标识将其置为false的功能<br><em>isInterrupted</em>:测试当前线程是否处于中断状态，不改变状态值<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Interrupt extends Thread&#123;</div><div class=\"line\">    public void run()&#123;</div><div class=\"line\">        for (int i=0; i&lt;500000; i++)&#123;</div><div class=\"line\">            super.run();</div><div class=\"line\">            if (this.isInterrupted())&#123;</div><div class=\"line\">                System.out.println(\"线程已经停止！退出\");</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.println(\"i=:\" + (i+1));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">--测试</div><div class=\"line\">public class Interrupted_test &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            Interrupt interrupt = new Interrupt();</div><div class=\"line\">            interrupt.setName(\"A\");</div><div class=\"line\">            interrupt.start();</div><div class=\"line\">            Thread.sleep(2000);</div><div class=\"line\">            interrupt.interrupt();</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"异常法\"><a href=\"#异常法\" class=\"headerlink\" title=\"异常法\"></a>异常法</h4><p> 通过捕获异常interruptedException，停止线程<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Interrupt extends Thread&#123;</div><div class=\"line\">    public void run()&#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            for (int i=0; i&lt;500000; i++)&#123;</div><div class=\"line\">                super.run();</div><div class=\"line\">                if (this.isInterrupted())&#123;</div><div class=\"line\">                    System.out.println(\"线程已经停止！退出\");</div><div class=\"line\">                    throw new InterruptedException();</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.out.println(\"i=:\" + (i+1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        System.out.println(\"我还要继续执行呢，狠狠！\");</div><div class=\"line\">        &#125;catch (InterruptedException e) &#123;</div><div class=\"line\">            System.out.println(\"I am interruptedException , i am catched by run! wu wu ....\");</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"在线程沉睡中停止\"><a href=\"#在线程沉睡中停止\" class=\"headerlink\" title=\"在线程沉睡中停止\"></a>在线程沉睡中停止</h4><p>在线程sleep时调用interrupted<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SleepInterrupt extends Thread&#123;</div><div class=\"line\"></div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">    try&#123;</div><div class=\"line\">        System.out.println(\"run begin--&gt; oo oo\");</div><div class=\"line\">        Thread.sleep(2000);</div><div class=\"line\">        System.out.println(\"run end--&gt; ......\");</div><div class=\"line\">    &#125; catch(InterruptedException e) &#123;</div><div class=\"line\">        System.out.println(\"I am dead in sleeping ......\");</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"暴力停止stop\"><a href=\"#暴力停止stop\" class=\"headerlink\" title=\"暴力停止stop\"></a>暴力停止stop</h4><p>用stop的方法停止线程的方式不推荐使用，这是一种不安全的停止方式,暴力停止可能会导致一些清理操作无法执行。</p>\n<h4 id=\"return停止\"><a href=\"#return停止\" class=\"headerlink\" title=\"return停止\"></a>return停止</h4><p>线程run()方法中直接return便退出线程。</p>\n<h3 id=\"暂停、恢复线程\"><a href=\"#暂停、恢复线程\" class=\"headerlink\" title=\"暂停、恢复线程\"></a>暂停、恢复线程</h3><p><em>suspend()</em>: 暂停线程<br><em>resume()</em>: 复线程<br>这种方法极易造成公共同步对象的独占，阻止其他线程访问公共同步方法;同时该方法也容易造成数据不同步的问题。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PrintLock extends Thread &#123;</div><div class=\"line\">    private long i = 0;</div><div class=\"line\">    public void run()&#123;</div><div class=\"line\">        while (true) &#123;</div><div class=\"line\">           // if (this.isInterrupted()) return;</div><div class=\"line\">            i++;</div><div class=\"line\">           //System.out.println(\"i=:\"+i);&lt;!--试试--&gt;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">--测试</div><div class=\"line\">public class PrintLock_test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            PrintLock printLock = new PrintLock();</div><div class=\"line\">            printLock.setName(\"binary\");</div><div class=\"line\">            printLock.start();</div><div class=\"line\">            Thread.sleep(1000);</div><div class=\"line\">            printLock.suspend();</div><div class=\"line\">            System.out.println(\"main end!\");</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当线程获取print()的同步锁未释放时，主线程无法使用println(), println()源码如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void println(String x) &#123;</div><div class=\"line\">       synchronized (this) &#123;</div><div class=\"line\">           print(x);</div><div class=\"line\">           newLine();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p> 线程调用yield()让出cpu，之后再获取cpu继续执行，期间间隔的时间不确定。</p>\n<h3 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h3><p>线程优先级有10个等级，1-10，设置优先级setPriority()。优先级较高的线程得到的cpu资源较多，也就是说cpu优先执行优先级较高的线程中对象中的任务。</p>\n<h4 id=\"优先级的继承性\"><a href=\"#优先级的继承性\" class=\"headerlink\" title=\"优先级的继承性\"></a>优先级的继承性</h4><p>线程的优先级与启动的线程的优先级一样。</p>\n<h4 id=\"优先级具有规则性\"><a href=\"#优先级具有规则性\" class=\"headerlink\" title=\"优先级具有规则性\"></a>优先级具有规则性</h4><h4 id=\"优先级具有随机性\"><a href=\"#优先级具有随机性\" class=\"headerlink\" title=\"优先级具有随机性\"></a>优先级具有随机性</h4><h3 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h3><p>Java线程中有两种线程，一种用户线程，另一种为守护线程。守护线程为非守护线程服务，当进程中没有非守护线程的时候，守护线程就会自动销毁，典型的如垃圾回收线程GC。只要当前的JVM虚拟机中存在任何一个非守护线程实例，守护线程就会一直工作。setDaemon()将线程设置为守护线程。</p>\n<h2 id=\"对象及变量的并发访问\"><a href=\"#对象及变量的并发访问\" class=\"headerlink\" title=\"对象及变量的并发访问\"></a>对象及变量的并发访问</h2><h3 id=\"synchronized-方法\"><a href=\"#synchronized-方法\" class=\"headerlink\" title=\"synchronized 方法\"></a>synchronized 方法</h3><p>非线程安全就是在多个线程对同一个对象的一个实例变量进行并发访问时出现“脏读”的现象，读到的数据是被修改过的，线程安全就是获取的实例变量的值是同步处理的，避免脏读现象。</p>\n<h4 id=\"实例变量的线程安全\"><a href=\"#实例变量的线程安全\" class=\"headerlink\" title=\"实例变量的线程安全\"></a>实例变量的线程安全</h4><p>方法内的变量是线程安全的，然而多个线程并发访问同一个对象的实例变量就是非线程安全的，此时会出现脏读。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class synch &#123;</div><div class=\"line\">    //private int num = 0;  非线程安全</div><div class=\"line\">     public void addI(String name) &#123;</div><div class=\"line\">      int num = 0;</div><div class=\"line\">        if(name.eq(\"a\"))&#123;</div><div class=\"line\">             num = 100;</div><div class=\"line\">             try</div><div class=\"line\">            &#123; Thread.sleep(1000);&#125;</div><div class=\"line\">            catch(InterruptedException e)&#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        else&#123;</div><div class=\"line\">            num = 200;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种情况就是在addI()方法加上synchronized锁。</p>\n<h4 id=\"多个对象多个锁\"><a href=\"#多个对象多个锁\" class=\"headerlink\" title=\"多个对象多个锁\"></a>多个对象多个锁</h4><p>synchronized只能锁住同一个对象实例的一个方法，同一对象的多个实例不受约束，通过synchronized锁住的方法只能顺序访问。</p>\n<h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MyObject &#123;</div><div class=\"line\"></div><div class=\"line\">    private String name = \"A\";</div><div class=\"line\">    private String pwd = \"AA\";</div><div class=\"line\"></div><div class=\"line\">    synchronized public void setValue(String _name, String _pwd)&#123;</div><div class=\"line\">        this.name = _name;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            Thread.sleep(5000);</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.pwd = _pwd;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   /*synchronized*/ public void getValue()&#123;</div><div class=\"line\">        System.out.println(Thread.currentThread().getName()+\"name:\"+this.name+\"&amp;\"+\"pwd:\"+this.pwd);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/2：17:00.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class MyThread extends Thread &#123;</div><div class=\"line\">    private MyObject mo;</div><div class=\"line\">    public MyThread(MyObject _mo) &#123;</div><div class=\"line\">        this.mo = _mo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void run()&#123;</div><div class=\"line\">        mo.setValue(\"B\", \"BB\");</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class MyTest &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        MyObject mo = new MyObject();</div><div class=\"line\">        MyThread mt = new MyThread(mo);</div><div class=\"line\">        mt.start();</div><div class=\"line\">        try &#123;</div><div class=\"line\">            Thread.sleep(500);</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        mo.getValue();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>线程调用对象的同步方法获得对象锁，其他线程不能获取对象的锁，即其他线程不能调用该对象的所有同步方法，但是其他线程可以调用该对象的非同步方法。</p>\n<h4 id=\"synchronized-锁重入\"><a href=\"#synchronized-锁重入\" class=\"headerlink\" title=\"synchronized 锁重入\"></a>synchronized 锁重入</h4><p>一个线程获取对象锁之后，是可以连续请求以连续获得该对象的锁，即在一个synchronized修饰的方法块内再次调用该对象的其他同步方法是可以的。</p>\n<h4 id=\"synchronized-锁释放\"><a href=\"#synchronized-锁释放\" class=\"headerlink\" title=\"synchronized 锁释放\"></a>synchronized 锁释放</h4><p>出现异常，直接自动释放锁</p>\n<h4 id=\"同步不具有继承性\"><a href=\"#同步不具有继承性\" class=\"headerlink\" title=\"同步不具有继承性\"></a>同步不具有继承性</h4><p>synchronized方法不能继承，在子类方法中添加synchronized修饰才能实现同步。</p>\n<h3 id=\"synchronized同步语句块\"><a href=\"#synchronized同步语句块\" class=\"headerlink\" title=\"synchronized同步语句块\"></a>synchronized同步语句块</h3><p>使用synchronized容易出现长时间等待的现象</p>\n<h4 id=\"锁非this对象\"><a href=\"#锁非this对象\" class=\"headerlink\" title=\"锁非this对象\"></a>锁非this对象</h4><p>非this锁不会与this锁争抢对象锁，这样可以大大提高执行效率，不会发生长时间等待。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/7：14:02.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class MyService &#123;</div><div class=\"line\">    public MyList addMyService(MyList ml,String str)&#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            synchronized(ml)&#123;</div><div class=\"line\">            if (ml.getSize()&lt;1)&#123;</div><div class=\"line\">                Thread.sleep(2000);</div><div class=\"line\">                ml.addList(str);</div><div class=\"line\">            &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return ml;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>####静态同步synchronized方法与synchronized（class）代码块<br>synchronized加到静态方法上，锁住的是class;synchronized加到非静态方法上，锁住的是对象。而锁住的是class锁可以对类的所有实例对象起作用</p>\n<h4 id=\"数据类型String的常量池特性\"><a href=\"#数据类型String的常量池特性\" class=\"headerlink\" title=\"数据类型String的常量池特性\"></a>数据类型String的常量池特性</h4><p>JVM中具有String常量池缓存的功能，对象不具有<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/9：13:47.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class Service &#123;</div><div class=\"line\">    public  void print(String object)&#123;</div><div class=\"line\">        synchronized(object)&#123;</div><div class=\"line\">            while (true)&#123;</div><div class=\"line\">                System.out.println(Thread.currentThread().getName());</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    Thread.sleep(1000);</div><div class=\"line\">                &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p> volatile是强制从公共堆栈中获取变量值，而不是从线程私有数据栈中获取变量值</p>\n<h4 id=\"volatile与synchronized的比较\"><a href=\"#volatile与synchronized的比较\" class=\"headerlink\" title=\"volatile与synchronized的比较\"></a>volatile与synchronized的比较</h4><p>关键字volatile是线程同步的轻量级实现，性能比synchronized好，volatile只能修数变量，而synchronized可以修饰方法和代码块，随着JDK版本的提升，synchronized的性能得到提升；多线程访问volatile不会发生阻塞，而多线程访问synchronized会发生阻塞；volatile可以保证数据的可见性，但不能保证数据的原子性，synchronized可以保证数据的原子性，也可以间接保证数据的可见性，因为它将会同步私有内存数据域和公共内存数据域的变量值；volatile可以保证多个线程访问变量的可见性，synchronized保证多个线程访问资源的同步性。volatile只能保证线程从内存中加载数据时是最新的，也就是读数据的时候是最新的，多个线程访问同一个实例变量还是要加锁保证同步。</p>\n<h2 id=\"线程间通信\"><a href=\"#线程间通信\" class=\"headerlink\" title=\"线程间通信\"></a>线程间通信</h2><h3 id=\"共享实例变量实现通信\"><a href=\"#共享实例变量实现通信\" class=\"headerlink\" title=\"共享实例变量实现通信\"></a>共享实例变量实现通信</h3><h3 id=\"通知-等待机制\"><a href=\"#通知-等待机制\" class=\"headerlink\" title=\"通知/等待机制\"></a>通知/等待机制</h3><p>wait/notify通知等待机制，二者都要在同步方法中，都需要获得对象锁。<br><em>wait():</em> 使调用wait的线程释放共享资源的锁，进入等待队列，直到再次被唤醒<br><em>notify():</em> 随机唤醒等待队列中等待同一个资源的线程，被选中的线程退出等待队列，进入可执行状态<br><em>notifyall():</em> 唤醒等待队列中所有等待同一资源的线程，全部进入可运行状态，此时优先级最高的线程最先运行，也可能随机执行，具体取决于JVM的实现机制<br>wait()执行之后会自动释放锁，notify()不会自动释放锁，只有在其所在的同步块执行完之后才释放锁</p>\n<h4 id=\"wait-long\"><a href=\"#wait-long\" class=\"headerlink\" title=\"wait(long)\"></a>wait(long)</h4><p> 在等待一段时间之内没被唤醒则自动唤醒</p>\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><p>join()是让所属的线程t正常执行，其他线程进入阻塞队列，在t执行完成之后，阻塞队列中的线程才能继续执行。<br><em>join(long):</em> 设置等待时间，底层实现是wait(long), 能够自动释放当前锁，之后其他线程可以获取该对象的同步方法<br><em>sleep(long):</em> 与join(long)不同的是sleep(long)不能自动释放锁</p>\n<h3 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h3><p>ThreadLocal为线程绑定私有变量</p>\n<h2 id=\"Lock的使用\"><a href=\"#Lock的使用\" class=\"headerlink\" title=\"Lock的使用\"></a>Lock的使用</h2><h3 id=\"使用ReentrantLock类\"><a href=\"#使用ReentrantLock类\" class=\"headerlink\" title=\"使用ReentrantLock类\"></a>使用ReentrantLock类</h3><p>ReentrantLock与synchronized作用类似，有lock()和nulock();</p>\n<h2 id=\"Timer\"><a href=\"#Timer\" class=\"headerlink\" title=\"Timer\"></a>Timer</h2><h2 id=\"单例模式与多线程\"><a href=\"#单例模式与多线程\" class=\"headerlink\" title=\"单例模式与多线程\"></a>单例模式与多线程</h2><h3 id=\"立即加载-饿汉模式\"><a href=\"#立即加载-饿汉模式\" class=\"headerlink\" title=\"立即加载/饿汉模式\"></a>立即加载/饿汉模式</h3><p>立即加载就是在使用类的时候已经创建完毕，常见的方法就是new实例化，而立即加载有着急、急迫的意思，所以称为饿汉模式</p>\n<h3 id=\"延迟加载-懒汉模式\"><a href=\"#延迟加载-懒汉模式\" class=\"headerlink\" title=\"延迟加载/懒汉模式\"></a>延迟加载/懒汉模式</h3><p>延迟加载就是调用get()方法时候才创建实例，常见的情况就是直接在get()方法中实例化，而延迟加载就是在从中文的语境的来看有缓慢和不急迫的意思，故称为懒汉模式。<br>延迟加载根本不能实现安全单例，只能在get()方法加同步synchronized锁才可以,但是该方法效率不高，也可以改成synchronized代码块的方法，但是同样效率低</p>\n<h4 id=\"使用DCL双检查锁机制\"><a href=\"#使用DCL双检查锁机制\" class=\"headerlink\" title=\"使用DCL双检查锁机制\"></a>使用DCL双检查锁机制</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/11：14:52.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class MyObject &#123;</div><div class=\"line\"></div><div class=\"line\">    private volatile static MyObject myObject;</div><div class=\"line\">    private MyObject()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static MyObject getInstance()&#123;</div><div class=\"line\">        if (myObject != null)&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                Thread.sleep(1000);</div><div class=\"line\">                synchronized (MyObject.class)&#123;</div><div class=\"line\">                    if (myObject == null)&#123;</div><div class=\"line\">                        myObject = new MyObject();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return myObject;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用静态内置类实现锁机制\"><a href=\"#使用静态内置类实现锁机制\" class=\"headerlink\" title=\"使用静态内置类实现锁机制\"></a>使用静态内置类实现锁机制</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/11：15:17.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class StaticClass &#123;</div><div class=\"line\">    private static final Logger logger = LoggerFactory.getLogger(StaticClass.class);</div><div class=\"line\">    private static class StaticHandler&#123;</div><div class=\"line\">        private static StaticClass staticClass = new StaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private StaticClass()&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static StaticClass getInstance()&#123;</div><div class=\"line\">        logger.info(\"静态内置类实现单例模式。。。。\");</div><div class=\"line\">        return  StaticHandler.staticClass;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"序列化和反序列化的单例模式实现\"><a href=\"#序列化和反序列化的单例模式实现\" class=\"headerlink\" title=\"序列化和反序列化的单例模式实现\"></a>序列化和反序列化的单例模式实现</h3><p>静态内置类能够达到单例模式的效果，但是在实现序列化的时候，如果按照默认的的方式则结果还是多例的<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/11：15:44.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class MyObject implements Serializable&#123;</div><div class=\"line\">    private static final Logger logger = LoggerFactory.getLogger(MyObject.class);</div><div class=\"line\">    private final static long serialVersionUID = -1L;</div><div class=\"line\">    private static class ObjectClass&#123;</div><div class=\"line\">        private static final MyObject myObject = new MyObject();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private MyObject()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static MyObject getInstance()&#123;</div><div class=\"line\">        return ObjectClass.myObject;</div><div class=\"line\">    &#125;</div><div class=\"line\">/**</div><div class=\"line\"> 那么这个readResolve()方法是从哪来的，为什么加上之后就能返回同一实例了呢？</div><div class=\"line\"> 找到ObjectInputStream类的</div><div class=\"line\"> * Reads and returns \"ordinary\" (i.e., not a String, Class,</div><div class=\"line\"> * ObjectStreamClass, array, or enum constant) object, or null if object's</div><div class=\"line\"> * class is unresolvable (in which case a ClassNotFoundException will be</div><div class=\"line\"> * associated with object's handle).  Sets passHandle to object's assigned</div><div class=\"line\"> * handle.</div><div class=\"line\"></div><div class=\"line\">private Object readOrdinaryObject(boolean unshared)</div><div class=\"line\">        throws IOException</div><div class=\"line\">&#123;</div><div class=\"line\">    if (bin.readByte() != TC_OBJECT) &#123;</div><div class=\"line\">        throw new InternalError();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ObjectStreamClass desc = readClassDesc(false);</div><div class=\"line\">    desc.checkDeserialize();</div><div class=\"line\"></div><div class=\"line\">    Class&lt;?&gt; cl = desc.forClass();</div><div class=\"line\">    if (cl == String.class || cl == Class.class</div><div class=\"line\">            || cl == ObjectStreamClass.class) &#123;</div><div class=\"line\">        throw new InvalidClassException(\"invalid class descriptor\");</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Object obj;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        obj = desc.isInstantiable() ? desc.newInstance() : null;</div><div class=\"line\">    &#125; catch (Exception ex) &#123;</div><div class=\"line\">        throw (IOException) new InvalidClassException(</div><div class=\"line\">                desc.forClass().getName(),</div><div class=\"line\">                \"unable to create instance\").initCause(ex);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    passHandle = handles.assign(unshared ? unsharedMarker : obj);</div><div class=\"line\">    ClassNotFoundException resolveEx = desc.getResolveException();</div><div class=\"line\">    if (resolveEx != null) &#123;</div><div class=\"line\">        handles.markException(passHandle, resolveEx);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (desc.isExternalizable()) &#123;</div><div class=\"line\">        readExternalData((Externalizable) obj, desc);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        readSerialData(obj, desc);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handles.finish(passHandle);</div><div class=\"line\"></div><div class=\"line\">    if (obj != null &amp;&amp;</div><div class=\"line\">            handles.lookupException(passHandle) == null &amp;&amp;</div><div class=\"line\">            desc.hasReadResolveMethod())</div><div class=\"line\">    &#123;</div><div class=\"line\">        Object rep = desc.invokeReadResolve(obj);</div><div class=\"line\">        if (unshared &amp;&amp; rep.getClass().isArray()) &#123;</div><div class=\"line\">            rep = cloneArray(rep);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (rep != obj) &#123;</div><div class=\"line\">            handles.setObject(passHandle, obj = rep);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return obj;</div><div class=\"line\">&#125;</div><div class=\"line\"> */</div><div class=\"line\">     protected Object readResolve()&#123;</div><div class=\"line\">        System.out.println(\"调用了readResolve方法！\");</div><div class=\"line\">        return  ObjectClass.myObject;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用static代码块实现单例模式\"><a href=\"#使用static代码块实现单例模式\" class=\"headerlink\" title=\"使用static代码块实现单例模式\"></a>使用static代码块实现单例模式</h3><p>static代码块中的代码代码在使用类的时候已经执行了<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/11：16:50.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class StaticSingleton &#123;</div><div class=\"line\">    private static StaticSingleton instance = null;</div><div class=\"line\">    private StaticSingleton()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    static &#123;</div><div class=\"line\">        instance = new StaticSingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static StaticSingleton getInstance()&#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用enum枚举数据类型实现单例模式\"><a href=\"#使用enum枚举数据类型实现单例模式\" class=\"headerlink\" title=\"使用enum枚举数据类型实现单例模式\"></a>使用enum枚举数据类型实现单例模式</h3><p>在使用枚举数据类型时，<em>构造方法</em>会被自动调用，可以根据这个特性实现单例模式</p>\n<h2 id=\"拾遗增补\"><a href=\"#拾遗增补\" class=\"headerlink\" title=\"拾遗增补\"></a>拾遗增补</h2><h3 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h3><p>调用线程的getState(), 线程状态new,runnable,running,terminated,timed_waiting,blocked,waiting,</p>\n<h3 id=\"线程组\"><a href=\"#线程组\" class=\"headerlink\" title=\"线程组\"></a>线程组</h3><h3 id=\"线程对象关联线程组：1级关联\"><a href=\"#线程对象关联线程组：1级关联\" class=\"headerlink\" title=\"线程对象关联线程组：1级关联\"></a>线程对象关联线程组：1级关联</h3><p>父对象与子对象</p>\n<h3 id=\"线程-对象关联线程组：多级关联\"><a href=\"#线程-对象关联线程组：多级关联\" class=\"headerlink\" title=\"线程 对象关联线程组：多级关联\"></a>线程 对象关联线程组：多级关联</h3><p>父对象与子对象以及孙子对象</p>\n<h3 id=\"线程具有有序性\"><a href=\"#线程具有有序性\" class=\"headerlink\" title=\"线程具有有序性\"></a>线程具有有序性</h3><h3 id=\"SimpleDateFormate非线程安全\"><a href=\"#SimpleDateFormate非线程安全\" class=\"headerlink\" title=\"SimpleDateFormate非线程安全\"></a>SimpleDateFormate非线程安全</h3><p>SimpleDateFormate类是非线程安全的，</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Java多线程技能\"><a href=\"#Java多线程技能\" class=\"headerlink\" title=\"Java多线程技能\"></a>Java多线程技能</h2><h3 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h3><p>虽然interrupt有停止、中止的意思，但是不能直接停止当前运行的线程，","more":"需要通过调用interrupted或者isInterrupted的状态来判断<br><em>interrupted</em>:测试当前线程是否处于中断状态，具有清除状态标识将其置为false的功能<br><em>isInterrupted</em>:测试当前线程是否处于中断状态，不改变状态值<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Interrupt extends Thread&#123;</div><div class=\"line\">    public void run()&#123;</div><div class=\"line\">        for (int i=0; i&lt;500000; i++)&#123;</div><div class=\"line\">            super.run();</div><div class=\"line\">            if (this.isInterrupted())&#123;</div><div class=\"line\">                System.out.println(\"线程已经停止！退出\");</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.println(\"i=:\" + (i+1));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">--测试</div><div class=\"line\">public class Interrupted_test &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            Interrupt interrupt = new Interrupt();</div><div class=\"line\">            interrupt.setName(\"A\");</div><div class=\"line\">            interrupt.start();</div><div class=\"line\">            Thread.sleep(2000);</div><div class=\"line\">            interrupt.interrupt();</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"异常法\"><a href=\"#异常法\" class=\"headerlink\" title=\"异常法\"></a>异常法</h4><p> 通过捕获异常interruptedException，停止线程<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Interrupt extends Thread&#123;</div><div class=\"line\">    public void run()&#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            for (int i=0; i&lt;500000; i++)&#123;</div><div class=\"line\">                super.run();</div><div class=\"line\">                if (this.isInterrupted())&#123;</div><div class=\"line\">                    System.out.println(\"线程已经停止！退出\");</div><div class=\"line\">                    throw new InterruptedException();</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.out.println(\"i=:\" + (i+1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        System.out.println(\"我还要继续执行呢，狠狠！\");</div><div class=\"line\">        &#125;catch (InterruptedException e) &#123;</div><div class=\"line\">            System.out.println(\"I am interruptedException , i am catched by run! wu wu ....\");</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"在线程沉睡中停止\"><a href=\"#在线程沉睡中停止\" class=\"headerlink\" title=\"在线程沉睡中停止\"></a>在线程沉睡中停止</h4><p>在线程sleep时调用interrupted<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SleepInterrupt extends Thread&#123;</div><div class=\"line\"></div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">    try&#123;</div><div class=\"line\">        System.out.println(\"run begin--&gt; oo oo\");</div><div class=\"line\">        Thread.sleep(2000);</div><div class=\"line\">        System.out.println(\"run end--&gt; ......\");</div><div class=\"line\">    &#125; catch(InterruptedException e) &#123;</div><div class=\"line\">        System.out.println(\"I am dead in sleeping ......\");</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"暴力停止stop\"><a href=\"#暴力停止stop\" class=\"headerlink\" title=\"暴力停止stop\"></a>暴力停止stop</h4><p>用stop的方法停止线程的方式不推荐使用，这是一种不安全的停止方式,暴力停止可能会导致一些清理操作无法执行。</p>\n<h4 id=\"return停止\"><a href=\"#return停止\" class=\"headerlink\" title=\"return停止\"></a>return停止</h4><p>线程run()方法中直接return便退出线程。</p>\n<h3 id=\"暂停、恢复线程\"><a href=\"#暂停、恢复线程\" class=\"headerlink\" title=\"暂停、恢复线程\"></a>暂停、恢复线程</h3><p><em>suspend()</em>: 暂停线程<br><em>resume()</em>: 复线程<br>这种方法极易造成公共同步对象的独占，阻止其他线程访问公共同步方法;同时该方法也容易造成数据不同步的问题。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PrintLock extends Thread &#123;</div><div class=\"line\">    private long i = 0;</div><div class=\"line\">    public void run()&#123;</div><div class=\"line\">        while (true) &#123;</div><div class=\"line\">           // if (this.isInterrupted()) return;</div><div class=\"line\">            i++;</div><div class=\"line\">           //System.out.println(\"i=:\"+i);&lt;!--试试--&gt;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">--测试</div><div class=\"line\">public class PrintLock_test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            PrintLock printLock = new PrintLock();</div><div class=\"line\">            printLock.setName(\"binary\");</div><div class=\"line\">            printLock.start();</div><div class=\"line\">            Thread.sleep(1000);</div><div class=\"line\">            printLock.suspend();</div><div class=\"line\">            System.out.println(\"main end!\");</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当线程获取print()的同步锁未释放时，主线程无法使用println(), println()源码如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void println(String x) &#123;</div><div class=\"line\">       synchronized (this) &#123;</div><div class=\"line\">           print(x);</div><div class=\"line\">           newLine();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><p> 线程调用yield()让出cpu，之后再获取cpu继续执行，期间间隔的时间不确定。</p>\n<h3 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h3><p>线程优先级有10个等级，1-10，设置优先级setPriority()。优先级较高的线程得到的cpu资源较多，也就是说cpu优先执行优先级较高的线程中对象中的任务。</p>\n<h4 id=\"优先级的继承性\"><a href=\"#优先级的继承性\" class=\"headerlink\" title=\"优先级的继承性\"></a>优先级的继承性</h4><p>线程的优先级与启动的线程的优先级一样。</p>\n<h4 id=\"优先级具有规则性\"><a href=\"#优先级具有规则性\" class=\"headerlink\" title=\"优先级具有规则性\"></a>优先级具有规则性</h4><h4 id=\"优先级具有随机性\"><a href=\"#优先级具有随机性\" class=\"headerlink\" title=\"优先级具有随机性\"></a>优先级具有随机性</h4><h3 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h3><p>Java线程中有两种线程，一种用户线程，另一种为守护线程。守护线程为非守护线程服务，当进程中没有非守护线程的时候，守护线程就会自动销毁，典型的如垃圾回收线程GC。只要当前的JVM虚拟机中存在任何一个非守护线程实例，守护线程就会一直工作。setDaemon()将线程设置为守护线程。</p>\n<h2 id=\"对象及变量的并发访问\"><a href=\"#对象及变量的并发访问\" class=\"headerlink\" title=\"对象及变量的并发访问\"></a>对象及变量的并发访问</h2><h3 id=\"synchronized-方法\"><a href=\"#synchronized-方法\" class=\"headerlink\" title=\"synchronized 方法\"></a>synchronized 方法</h3><p>非线程安全就是在多个线程对同一个对象的一个实例变量进行并发访问时出现“脏读”的现象，读到的数据是被修改过的，线程安全就是获取的实例变量的值是同步处理的，避免脏读现象。</p>\n<h4 id=\"实例变量的线程安全\"><a href=\"#实例变量的线程安全\" class=\"headerlink\" title=\"实例变量的线程安全\"></a>实例变量的线程安全</h4><p>方法内的变量是线程安全的，然而多个线程并发访问同一个对象的实例变量就是非线程安全的，此时会出现脏读。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class synch &#123;</div><div class=\"line\">    //private int num = 0;  非线程安全</div><div class=\"line\">     public void addI(String name) &#123;</div><div class=\"line\">      int num = 0;</div><div class=\"line\">        if(name.eq(\"a\"))&#123;</div><div class=\"line\">             num = 100;</div><div class=\"line\">             try</div><div class=\"line\">            &#123; Thread.sleep(1000);&#125;</div><div class=\"line\">            catch(InterruptedException e)&#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        else&#123;</div><div class=\"line\">            num = 200;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种情况就是在addI()方法加上synchronized锁。</p>\n<h4 id=\"多个对象多个锁\"><a href=\"#多个对象多个锁\" class=\"headerlink\" title=\"多个对象多个锁\"></a>多个对象多个锁</h4><p>synchronized只能锁住同一个对象实例的一个方法，同一对象的多个实例不受约束，通过synchronized锁住的方法只能顺序访问。</p>\n<h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MyObject &#123;</div><div class=\"line\"></div><div class=\"line\">    private String name = \"A\";</div><div class=\"line\">    private String pwd = \"AA\";</div><div class=\"line\"></div><div class=\"line\">    synchronized public void setValue(String _name, String _pwd)&#123;</div><div class=\"line\">        this.name = _name;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            Thread.sleep(5000);</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.pwd = _pwd;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   /*synchronized*/ public void getValue()&#123;</div><div class=\"line\">        System.out.println(Thread.currentThread().getName()+\"name:\"+this.name+\"&amp;\"+\"pwd:\"+this.pwd);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/2：17:00.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class MyThread extends Thread &#123;</div><div class=\"line\">    private MyObject mo;</div><div class=\"line\">    public MyThread(MyObject _mo) &#123;</div><div class=\"line\">        this.mo = _mo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void run()&#123;</div><div class=\"line\">        mo.setValue(\"B\", \"BB\");</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class MyTest &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        MyObject mo = new MyObject();</div><div class=\"line\">        MyThread mt = new MyThread(mo);</div><div class=\"line\">        mt.start();</div><div class=\"line\">        try &#123;</div><div class=\"line\">            Thread.sleep(500);</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        mo.getValue();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>线程调用对象的同步方法获得对象锁，其他线程不能获取对象的锁，即其他线程不能调用该对象的所有同步方法，但是其他线程可以调用该对象的非同步方法。</p>\n<h4 id=\"synchronized-锁重入\"><a href=\"#synchronized-锁重入\" class=\"headerlink\" title=\"synchronized 锁重入\"></a>synchronized 锁重入</h4><p>一个线程获取对象锁之后，是可以连续请求以连续获得该对象的锁，即在一个synchronized修饰的方法块内再次调用该对象的其他同步方法是可以的。</p>\n<h4 id=\"synchronized-锁释放\"><a href=\"#synchronized-锁释放\" class=\"headerlink\" title=\"synchronized 锁释放\"></a>synchronized 锁释放</h4><p>出现异常，直接自动释放锁</p>\n<h4 id=\"同步不具有继承性\"><a href=\"#同步不具有继承性\" class=\"headerlink\" title=\"同步不具有继承性\"></a>同步不具有继承性</h4><p>synchronized方法不能继承，在子类方法中添加synchronized修饰才能实现同步。</p>\n<h3 id=\"synchronized同步语句块\"><a href=\"#synchronized同步语句块\" class=\"headerlink\" title=\"synchronized同步语句块\"></a>synchronized同步语句块</h3><p>使用synchronized容易出现长时间等待的现象</p>\n<h4 id=\"锁非this对象\"><a href=\"#锁非this对象\" class=\"headerlink\" title=\"锁非this对象\"></a>锁非this对象</h4><p>非this锁不会与this锁争抢对象锁，这样可以大大提高执行效率，不会发生长时间等待。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/7：14:02.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class MyService &#123;</div><div class=\"line\">    public MyList addMyService(MyList ml,String str)&#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            synchronized(ml)&#123;</div><div class=\"line\">            if (ml.getSize()&lt;1)&#123;</div><div class=\"line\">                Thread.sleep(2000);</div><div class=\"line\">                ml.addList(str);</div><div class=\"line\">            &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return ml;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>####静态同步synchronized方法与synchronized（class）代码块<br>synchronized加到静态方法上，锁住的是class;synchronized加到非静态方法上，锁住的是对象。而锁住的是class锁可以对类的所有实例对象起作用</p>\n<h4 id=\"数据类型String的常量池特性\"><a href=\"#数据类型String的常量池特性\" class=\"headerlink\" title=\"数据类型String的常量池特性\"></a>数据类型String的常量池特性</h4><p>JVM中具有String常量池缓存的功能，对象不具有<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/9：13:47.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class Service &#123;</div><div class=\"line\">    public  void print(String object)&#123;</div><div class=\"line\">        synchronized(object)&#123;</div><div class=\"line\">            while (true)&#123;</div><div class=\"line\">                System.out.println(Thread.currentThread().getName());</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    Thread.sleep(1000);</div><div class=\"line\">                &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p> volatile是强制从公共堆栈中获取变量值，而不是从线程私有数据栈中获取变量值</p>\n<h4 id=\"volatile与synchronized的比较\"><a href=\"#volatile与synchronized的比较\" class=\"headerlink\" title=\"volatile与synchronized的比较\"></a>volatile与synchronized的比较</h4><p>关键字volatile是线程同步的轻量级实现，性能比synchronized好，volatile只能修数变量，而synchronized可以修饰方法和代码块，随着JDK版本的提升，synchronized的性能得到提升；多线程访问volatile不会发生阻塞，而多线程访问synchronized会发生阻塞；volatile可以保证数据的可见性，但不能保证数据的原子性，synchronized可以保证数据的原子性，也可以间接保证数据的可见性，因为它将会同步私有内存数据域和公共内存数据域的变量值；volatile可以保证多个线程访问变量的可见性，synchronized保证多个线程访问资源的同步性。volatile只能保证线程从内存中加载数据时是最新的，也就是读数据的时候是最新的，多个线程访问同一个实例变量还是要加锁保证同步。</p>\n<h2 id=\"线程间通信\"><a href=\"#线程间通信\" class=\"headerlink\" title=\"线程间通信\"></a>线程间通信</h2><h3 id=\"共享实例变量实现通信\"><a href=\"#共享实例变量实现通信\" class=\"headerlink\" title=\"共享实例变量实现通信\"></a>共享实例变量实现通信</h3><h3 id=\"通知-等待机制\"><a href=\"#通知-等待机制\" class=\"headerlink\" title=\"通知/等待机制\"></a>通知/等待机制</h3><p>wait/notify通知等待机制，二者都要在同步方法中，都需要获得对象锁。<br><em>wait():</em> 使调用wait的线程释放共享资源的锁，进入等待队列，直到再次被唤醒<br><em>notify():</em> 随机唤醒等待队列中等待同一个资源的线程，被选中的线程退出等待队列，进入可执行状态<br><em>notifyall():</em> 唤醒等待队列中所有等待同一资源的线程，全部进入可运行状态，此时优先级最高的线程最先运行，也可能随机执行，具体取决于JVM的实现机制<br>wait()执行之后会自动释放锁，notify()不会自动释放锁，只有在其所在的同步块执行完之后才释放锁</p>\n<h4 id=\"wait-long\"><a href=\"#wait-long\" class=\"headerlink\" title=\"wait(long)\"></a>wait(long)</h4><p> 在等待一段时间之内没被唤醒则自动唤醒</p>\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><p>join()是让所属的线程t正常执行，其他线程进入阻塞队列，在t执行完成之后，阻塞队列中的线程才能继续执行。<br><em>join(long):</em> 设置等待时间，底层实现是wait(long), 能够自动释放当前锁，之后其他线程可以获取该对象的同步方法<br><em>sleep(long):</em> 与join(long)不同的是sleep(long)不能自动释放锁</p>\n<h3 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h3><p>ThreadLocal为线程绑定私有变量</p>\n<h2 id=\"Lock的使用\"><a href=\"#Lock的使用\" class=\"headerlink\" title=\"Lock的使用\"></a>Lock的使用</h2><h3 id=\"使用ReentrantLock类\"><a href=\"#使用ReentrantLock类\" class=\"headerlink\" title=\"使用ReentrantLock类\"></a>使用ReentrantLock类</h3><p>ReentrantLock与synchronized作用类似，有lock()和nulock();</p>\n<h2 id=\"Timer\"><a href=\"#Timer\" class=\"headerlink\" title=\"Timer\"></a>Timer</h2><h2 id=\"单例模式与多线程\"><a href=\"#单例模式与多线程\" class=\"headerlink\" title=\"单例模式与多线程\"></a>单例模式与多线程</h2><h3 id=\"立即加载-饿汉模式\"><a href=\"#立即加载-饿汉模式\" class=\"headerlink\" title=\"立即加载/饿汉模式\"></a>立即加载/饿汉模式</h3><p>立即加载就是在使用类的时候已经创建完毕，常见的方法就是new实例化，而立即加载有着急、急迫的意思，所以称为饿汉模式</p>\n<h3 id=\"延迟加载-懒汉模式\"><a href=\"#延迟加载-懒汉模式\" class=\"headerlink\" title=\"延迟加载/懒汉模式\"></a>延迟加载/懒汉模式</h3><p>延迟加载就是调用get()方法时候才创建实例，常见的情况就是直接在get()方法中实例化，而延迟加载就是在从中文的语境的来看有缓慢和不急迫的意思，故称为懒汉模式。<br>延迟加载根本不能实现安全单例，只能在get()方法加同步synchronized锁才可以,但是该方法效率不高，也可以改成synchronized代码块的方法，但是同样效率低</p>\n<h4 id=\"使用DCL双检查锁机制\"><a href=\"#使用DCL双检查锁机制\" class=\"headerlink\" title=\"使用DCL双检查锁机制\"></a>使用DCL双检查锁机制</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/11：14:52.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class MyObject &#123;</div><div class=\"line\"></div><div class=\"line\">    private volatile static MyObject myObject;</div><div class=\"line\">    private MyObject()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static MyObject getInstance()&#123;</div><div class=\"line\">        if (myObject != null)&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                Thread.sleep(1000);</div><div class=\"line\">                synchronized (MyObject.class)&#123;</div><div class=\"line\">                    if (myObject == null)&#123;</div><div class=\"line\">                        myObject = new MyObject();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return myObject;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用静态内置类实现锁机制\"><a href=\"#使用静态内置类实现锁机制\" class=\"headerlink\" title=\"使用静态内置类实现锁机制\"></a>使用静态内置类实现锁机制</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/11：15:17.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class StaticClass &#123;</div><div class=\"line\">    private static final Logger logger = LoggerFactory.getLogger(StaticClass.class);</div><div class=\"line\">    private static class StaticHandler&#123;</div><div class=\"line\">        private static StaticClass staticClass = new StaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private StaticClass()&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static StaticClass getInstance()&#123;</div><div class=\"line\">        logger.info(\"静态内置类实现单例模式。。。。\");</div><div class=\"line\">        return  StaticHandler.staticClass;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"序列化和反序列化的单例模式实现\"><a href=\"#序列化和反序列化的单例模式实现\" class=\"headerlink\" title=\"序列化和反序列化的单例模式实现\"></a>序列化和反序列化的单例模式实现</h3><p>静态内置类能够达到单例模式的效果，但是在实现序列化的时候，如果按照默认的的方式则结果还是多例的<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/11：15:44.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class MyObject implements Serializable&#123;</div><div class=\"line\">    private static final Logger logger = LoggerFactory.getLogger(MyObject.class);</div><div class=\"line\">    private final static long serialVersionUID = -1L;</div><div class=\"line\">    private static class ObjectClass&#123;</div><div class=\"line\">        private static final MyObject myObject = new MyObject();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private MyObject()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static MyObject getInstance()&#123;</div><div class=\"line\">        return ObjectClass.myObject;</div><div class=\"line\">    &#125;</div><div class=\"line\">/**</div><div class=\"line\"> 那么这个readResolve()方法是从哪来的，为什么加上之后就能返回同一实例了呢？</div><div class=\"line\"> 找到ObjectInputStream类的</div><div class=\"line\"> * Reads and returns \"ordinary\" (i.e., not a String, Class,</div><div class=\"line\"> * ObjectStreamClass, array, or enum constant) object, or null if object's</div><div class=\"line\"> * class is unresolvable (in which case a ClassNotFoundException will be</div><div class=\"line\"> * associated with object's handle).  Sets passHandle to object's assigned</div><div class=\"line\"> * handle.</div><div class=\"line\"></div><div class=\"line\">private Object readOrdinaryObject(boolean unshared)</div><div class=\"line\">        throws IOException</div><div class=\"line\">&#123;</div><div class=\"line\">    if (bin.readByte() != TC_OBJECT) &#123;</div><div class=\"line\">        throw new InternalError();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ObjectStreamClass desc = readClassDesc(false);</div><div class=\"line\">    desc.checkDeserialize();</div><div class=\"line\"></div><div class=\"line\">    Class&lt;?&gt; cl = desc.forClass();</div><div class=\"line\">    if (cl == String.class || cl == Class.class</div><div class=\"line\">            || cl == ObjectStreamClass.class) &#123;</div><div class=\"line\">        throw new InvalidClassException(\"invalid class descriptor\");</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Object obj;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        obj = desc.isInstantiable() ? desc.newInstance() : null;</div><div class=\"line\">    &#125; catch (Exception ex) &#123;</div><div class=\"line\">        throw (IOException) new InvalidClassException(</div><div class=\"line\">                desc.forClass().getName(),</div><div class=\"line\">                \"unable to create instance\").initCause(ex);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    passHandle = handles.assign(unshared ? unsharedMarker : obj);</div><div class=\"line\">    ClassNotFoundException resolveEx = desc.getResolveException();</div><div class=\"line\">    if (resolveEx != null) &#123;</div><div class=\"line\">        handles.markException(passHandle, resolveEx);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (desc.isExternalizable()) &#123;</div><div class=\"line\">        readExternalData((Externalizable) obj, desc);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        readSerialData(obj, desc);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handles.finish(passHandle);</div><div class=\"line\"></div><div class=\"line\">    if (obj != null &amp;&amp;</div><div class=\"line\">            handles.lookupException(passHandle) == null &amp;&amp;</div><div class=\"line\">            desc.hasReadResolveMethod())</div><div class=\"line\">    &#123;</div><div class=\"line\">        Object rep = desc.invokeReadResolve(obj);</div><div class=\"line\">        if (unshared &amp;&amp; rep.getClass().isArray()) &#123;</div><div class=\"line\">            rep = cloneArray(rep);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (rep != obj) &#123;</div><div class=\"line\">            handles.setObject(passHandle, obj = rep);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return obj;</div><div class=\"line\">&#125;</div><div class=\"line\"> */</div><div class=\"line\">     protected Object readResolve()&#123;</div><div class=\"line\">        System.out.println(\"调用了readResolve方法！\");</div><div class=\"line\">        return  ObjectClass.myObject;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用static代码块实现单例模式\"><a href=\"#使用static代码块实现单例模式\" class=\"headerlink\" title=\"使用static代码块实现单例模式\"></a>使用static代码块实现单例模式</h3><p>static代码块中的代码代码在使用类的时候已经执行了<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by song.yang on 2017/3/11：16:50.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * e-mail:song.yang@msxf.com</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class StaticSingleton &#123;</div><div class=\"line\">    private static StaticSingleton instance = null;</div><div class=\"line\">    private StaticSingleton()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    static &#123;</div><div class=\"line\">        instance = new StaticSingleton();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static StaticSingleton getInstance()&#123;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用enum枚举数据类型实现单例模式\"><a href=\"#使用enum枚举数据类型实现单例模式\" class=\"headerlink\" title=\"使用enum枚举数据类型实现单例模式\"></a>使用enum枚举数据类型实现单例模式</h3><p>在使用枚举数据类型时，<em>构造方法</em>会被自动调用，可以根据这个特性实现单例模式</p>\n<h2 id=\"拾遗增补\"><a href=\"#拾遗增补\" class=\"headerlink\" title=\"拾遗增补\"></a>拾遗增补</h2><h3 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h3><p>调用线程的getState(), 线程状态new,runnable,running,terminated,timed_waiting,blocked,waiting,</p>\n<h3 id=\"线程组\"><a href=\"#线程组\" class=\"headerlink\" title=\"线程组\"></a>线程组</h3><h3 id=\"线程对象关联线程组：1级关联\"><a href=\"#线程对象关联线程组：1级关联\" class=\"headerlink\" title=\"线程对象关联线程组：1级关联\"></a>线程对象关联线程组：1级关联</h3><p>父对象与子对象</p>\n<h3 id=\"线程-对象关联线程组：多级关联\"><a href=\"#线程-对象关联线程组：多级关联\" class=\"headerlink\" title=\"线程 对象关联线程组：多级关联\"></a>线程 对象关联线程组：多级关联</h3><p>父对象与子对象以及孙子对象</p>\n<h3 id=\"线程具有有序性\"><a href=\"#线程具有有序性\" class=\"headerlink\" title=\"线程具有有序性\"></a>线程具有有序性</h3><h3 id=\"SimpleDateFormate非线程安全\"><a href=\"#SimpleDateFormate非线程安全\" class=\"headerlink\" title=\"SimpleDateFormate非线程安全\"></a>SimpleDateFormate非线程安全</h3><p>SimpleDateFormate类是非线程安全的，</p>"},{"title":"深入理解JVM","date":"2017-06-16T08:48:20.000Z","_content":"## 前言\n  java是世界上最好的语言！！！","source":"_posts/笔记/深入理解JVM/深入理解JVM.md","raw":"---\ntitle: 深入理解JVM\ndate: 2017-06-16 16:48:20\ntags: [jvm]\ncategories: 笔记\n---\n## 前言\n  java是世界上最好的语言！！！","slug":"笔记/深入理解JVM/深入理解JVM","published":1,"updated":"2017-06-16T08:10:04.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3zlkzys000mkct7jfs2mzah","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  java是世界上最好的语言！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  java是世界上最好的语言！！！</p>\n"},{"title":"数据库查询优化","date":"2017-02-23T09:46:20.000Z","_content":"## 数据库设计方面\n**A**:对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。<!-- more --> \n**B**:应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\n``` bash\nselect id from t where num is null  \nselect id from t where num=0\n```\n\n**C**: 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时,查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用\n**D**:索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要\n**E**:应尽可能的避免更新索引数据列，因为索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新索引数据列，那么需要考虑是否应将该索引建为索引\n**F**:尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了\n**G**:尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些\n**H**:尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）\n**I**:在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n``` bash\ncreate table TEMP_CCS_ACCT_20170103 as SELECT * from CCS_ACCT a where a.CONTR_NBR in ('');\ninsert into table_A select * from table_B \n```\n\n## SQL方面\n","source":"_posts/笔记/数据库/数据库查询.md","raw":"---\ntitle: 数据库查询优化\ndate: 2017-02-23 17:46:20\ntags: [数据库,查询]\ncategories: 笔记\n---\n## 数据库设计方面\n**A**:对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。<!-- more --> \n**B**:应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\n``` bash\nselect id from t where num is null  \nselect id from t where num=0\n```\n\n**C**: 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时,查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用\n**D**:索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要\n**E**:应尽可能的避免更新索引数据列，因为索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新索引数据列，那么需要考虑是否应将该索引建为索引\n**F**:尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了\n**G**:尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些\n**H**:尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）\n**I**:在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n``` bash\ncreate table TEMP_CCS_ACCT_20170103 as SELECT * from CCS_ACCT a where a.CONTR_NBR in ('');\ninsert into table_A select * from table_B \n```\n\n## SQL方面\n","slug":"笔记/数据库/数据库查询","published":1,"updated":"2017-06-16T07:27:29.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3zlkzyx000qkct75fo2l0ih","content":"<h2 id=\"数据库设计方面\"><a href=\"#数据库设计方面\" class=\"headerlink\" title=\"数据库设计方面\"></a>数据库设计方面</h2><p><strong>A</strong>:对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。<a id=\"more\"></a><br><strong>B</strong>:应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">select id from t <span class=\"built_in\">where</span> num is null  </div><div class=\"line\">select id from t <span class=\"built_in\">where</span> num=0</div></pre></td></tr></table></figure></p>\n<p><strong>C</strong>: 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时,查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用<br><strong>D</strong>:索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要<br><strong>E</strong>:应尽可能的避免更新索引数据列，因为索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新索引数据列，那么需要考虑是否应将该索引建为索引<br><strong>F</strong>:尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了<br><strong>G</strong>:尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些<br><strong>H</strong>:尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）<br><strong>I</strong>:在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">create table TEMP_CCS_ACCT_20170103 as SELECT * from CCS_ACCT a <span class=\"built_in\">where</span> a.CONTR_NBR <span class=\"keyword\">in</span> (<span class=\"string\">''</span>);</div><div class=\"line\">insert into table_A select * from table_B</div></pre></td></tr></table></figure></p>\n<h2 id=\"SQL方面\"><a href=\"#SQL方面\" class=\"headerlink\" title=\"SQL方面\"></a>SQL方面</h2>","site":{"data":{}},"excerpt":"<h2 id=\"数据库设计方面\"><a href=\"#数据库设计方面\" class=\"headerlink\" title=\"数据库设计方面\"></a>数据库设计方面</h2><p><strong>A</strong>:对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。","more":"<br><strong>B</strong>:应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">select id from t <span class=\"built_in\">where</span> num is null  </div><div class=\"line\">select id from t <span class=\"built_in\">where</span> num=0</div></pre></td></tr></table></figure></p>\n<p><strong>C</strong>: 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时,查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用<br><strong>D</strong>:索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要<br><strong>E</strong>:应尽可能的避免更新索引数据列，因为索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新索引数据列，那么需要考虑是否应将该索引建为索引<br><strong>F</strong>:尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了<br><strong>G</strong>:尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些<br><strong>H</strong>:尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）<br><strong>I</strong>:在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">create table TEMP_CCS_ACCT_20170103 as SELECT * from CCS_ACCT a <span class=\"built_in\">where</span> a.CONTR_NBR <span class=\"keyword\">in</span> (<span class=\"string\">''</span>);</div><div class=\"line\">insert into table_A select * from table_B</div></pre></td></tr></table></figure></p>\n<h2 id=\"SQL方面\"><a href=\"#SQL方面\" class=\"headerlink\" title=\"SQL方面\"></a>SQL方面</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3zlkzvk0002kct7wfrdunk5","category_id":"cj3zlkzvr0003kct77yu3kwq0","_id":"cj3zlkzvv0006kct7tr14r0y5"},{"post_id":"cj3zlkzyc000gkct7it9oey9c","category_id":"cj3zlkzy8000dkct7f5fb6d25","_id":"cj3zlkzyr000lkct7jlhf5lrk"},{"post_id":"cj3zlkzy5000bkct7gjyj0bcc","category_id":"cj3zlkzy8000dkct7f5fb6d25","_id":"cj3zlkzyw000pkct7yloqxi20"},{"post_id":"cj3zlkzyf000hkct7flaunhm4","category_id":"cj3zlkzy8000dkct7f5fb6d25","_id":"cj3zlkzz0000skct71bqh0bjk"},{"post_id":"cj3zlkzyo000kkct7ek4jfkwj","category_id":"cj3zlkzy8000dkct7f5fb6d25","_id":"cj3zlkzz1000vkct7edae0sbq"},{"post_id":"cj3zlkzy6000ckct7z1motvwv","category_id":"cj3zlkzy8000dkct7f5fb6d25","_id":"cj3zlkzz1000wkct73t1yit5f"},{"post_id":"cj3zlkzys000mkct7jfs2mzah","category_id":"cj3zlkzy8000dkct7f5fb6d25","_id":"cj3zlkzz1000ykct77u8yz32m"},{"post_id":"cj3zlkzyx000qkct75fo2l0ih","category_id":"cj3zlkzy8000dkct7f5fb6d25","_id":"cj3zlkzz20010kct75cdpfezd"},{"post_id":"cj3zlkzy9000fkct7tezhkjx3","category_id":"cj3zlkzy8000dkct7f5fb6d25","_id":"cj3zlkzz20012kct7yieq1c6o"}],"PostTag":[{"post_id":"cj3zlkzvk0002kct7wfrdunk5","tag_id":"cj3zlkzvu0004kct7ryocyl99","_id":"cj3zlkzvx0008kct75atqa4y5"},{"post_id":"cj3zlkzvk0002kct7wfrdunk5","tag_id":"cj3zlkzvv0005kct74mzpi89q","_id":"cj3zlkzvx0009kct7q0r1awva"},{"post_id":"cj3zlkzvk0002kct7wfrdunk5","tag_id":"cj3zlkzvv0007kct7sgknb3l5","_id":"cj3zlkzvx000akct7vishl3nq"},{"post_id":"cj3zlkzy5000bkct7gjyj0bcc","tag_id":"cj3zlkzy8000ekct72guby4vy","_id":"cj3zlkzyz000rkct74jzpx0d4"},{"post_id":"cj3zlkzy5000bkct7gjyj0bcc","tag_id":"cj3zlkzyk000jkct7873dy4fz","_id":"cj3zlkzz0000tkct73wntcx2u"},{"post_id":"cj3zlkzy6000ckct7z1motvwv","tag_id":"cj3zlkzy8000ekct72guby4vy","_id":"cj3zlkzz2000zkct77n1zsyss"},{"post_id":"cj3zlkzy6000ckct7z1motvwv","tag_id":"cj3zlkzz0000ukct7zqjq5bvg","_id":"cj3zlkzz20011kct745elyzw3"},{"post_id":"cj3zlkzy9000fkct7tezhkjx3","tag_id":"cj3zlkzz1000xkct70yom0htr","_id":"cj3zlkzz40015kct7da1f2lzu"},{"post_id":"cj3zlkzy9000fkct7tezhkjx3","tag_id":"cj3zlkzz20013kct7tbcg5jtg","_id":"cj3zlkzz40016kct71otebfb7"},{"post_id":"cj3zlkzyc000gkct7it9oey9c","tag_id":"cj3zlkzy8000ekct72guby4vy","_id":"cj3zlkzz70018kct709svan5t"},{"post_id":"cj3zlkzyc000gkct7it9oey9c","tag_id":"cj3zlkzz30014kct7487kz2ld","_id":"cj3zlkzz70019kct7xyn28dva"},{"post_id":"cj3zlkzyf000hkct7flaunhm4","tag_id":"cj3zlkzz50017kct7tg53783g","_id":"cj3zlkzz8001bkct7w6rm2out"},{"post_id":"cj3zlkzyo000kkct7ek4jfkwj","tag_id":"cj3zlkzz8001akct7ikskvsr2","_id":"cj3zlkzz9001ekct7z1bxdtuz"},{"post_id":"cj3zlkzyo000kkct7ek4jfkwj","tag_id":"cj3zlkzz8001ckct7qgddgqzv","_id":"cj3zlkzz9001fkct7l0anbgl3"},{"post_id":"cj3zlkzys000mkct7jfs2mzah","tag_id":"cj3zlkzz9001dkct7sb7bc0rf","_id":"cj3zlkzza001hkct7trsp0ksg"},{"post_id":"cj3zlkzyx000qkct75fo2l0ih","tag_id":"cj3zlkzz9001gkct75h5x9iyn","_id":"cj3zlkzzc001jkct7zeoqod94"},{"post_id":"cj3zlkzyx000qkct75fo2l0ih","tag_id":"cj3zlkzza001ikct72rqbr43p","_id":"cj3zlkzzc001kkct7ptlvir1a"}],"Tag":[{"name":"npm","_id":"cj3zlkzvu0004kct7ryocyl99"},{"name":"hexo","_id":"cj3zlkzvv0005kct74mzpi89q"},{"name":"github","_id":"cj3zlkzvv0007kct7sgknb3l5"},{"name":"MySQL","_id":"cj3zlkzy8000ekct72guby4vy"},{"name":"存储引擎","_id":"cj3zlkzyk000jkct7873dy4fz"},{"name":"分片","_id":"cj3zlkzz0000ukct7zqjq5bvg"},{"name":"SQL","_id":"cj3zlkzz1000xkct70yom0htr"},{"name":"存储过程，MyBatis","_id":"cj3zlkzz20013kct7tbcg5jtg"},{"name":"锁","_id":"cj3zlkzz30014kct7487kz2ld"},{"name":"redis","_id":"cj3zlkzz50017kct7tg53783g"},{"name":"java","_id":"cj3zlkzz8001akct7ikskvsr2"},{"name":"thread","_id":"cj3zlkzz8001ckct7qgddgqzv"},{"name":"jvm","_id":"cj3zlkzz9001dkct7sb7bc0rf"},{"name":"数据库","_id":"cj3zlkzz9001gkct75h5x9iyn"},{"name":"查询","_id":"cj3zlkzza001ikct72rqbr43p"}]}}